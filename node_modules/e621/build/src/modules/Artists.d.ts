import type E621 from "..";
import Artist from "../structures/Artist";
import type { SearchArtistsOptions, CreateArtistOptions, ModifyArtistOptions, SearchArtistHistoryOptions } from "../types";
import ArtistHistory from "../structures/ArtistHistory";
export default class Artists {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get an artist by their id
     *
     * @param {number} id - The id of the artist to get
     * @returns {Promise<(Artist | null)>}
     */
    get(id: number): Promise<Artist | null>;
    /**
     * Get an artist by their name
     *
     * @param {string} name - The name of the artist to get
     * @returns {Promise<(Artist | null)>}
     */
    getByName(name: string): Promise<Artist | null>;
    /**
     * Search for artists
     *
     * @param {object} [options]
     * @param {string} [options.name] - narrow the results by the name of the artist
     * @param {string} [options.url] - narrow the results by urls of the artist
     * @param {string} [options.creator] - narrow the results by the (name of the) creator of the artist page
     * @param {boolean} [options.active] - narrow the results by the artist being active
     * @param {boolean} [options.banned] - narrow the results by the artist being banned
     * @param {boolean} [options.has_tag] - narrow the results by the artist having a matching tag
     * @param {SearchArtistsOrder} [options.order] - the order of the results
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<ArtistProperties>>}
     */
    search(options?: SearchArtistsOptions): Promise<Artist[]>;
    /**
     * Create an artist
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} options.name - the name of artist
     * @param {number} [options.linked_user_id] - the id of the user associated with this artist (requires janitor)
     * @param {boolean} [options.locked] - if the artist should be locked (requires janitor)
     * @param {(Array<string> | string)} [options.other_names] - the other names for this artist
     * @param {string} [options.group_name] - the group name of this artist (this is [planned to be removed](https://github.com/zwagoth/e621ng/pull/357))
     * @param {(Array<string> | string)} [options.urls] - the urls associated with this artist
     * @param {string} [options.notes] - notes for this artist
     * @returns {Promise<Artist>}
     */
    create(options: CreateArtistOptions): Promise<Artist>;
    /**
     * modify an artist
     *
     * * Requires Authentication
     *
     * @param {number} id - the id  of the artists to edit
     * @param {object} options
     * @param {string} [options.name] - the name of artist (requires janitor)
     * @param {number} [options.linked_user_id] - the id of the user associated with this artist (requires janitor)
     * @param {boolean} [options.locked] - if the artist should be locked (requires janitor)
     * @param {(Array<string> | string)} [options.other_names] - the other names for this artist
     * @param {string} [options.group_name] - the group name of this artist (this is [planned to be removed](https://github.com/zwagoth/e621ng/pull/357))
     * @param {(Array<string> | string)} [options.urls] - the urls associated with this artist
     * @param {string} [options.notes] - notes for this artist
     * @returns {Promise<Artist>}
     */
    modify(id: number, options: ModifyArtistOptions): Promise<Artist>;
    /**
     * Delete an artist
     *
     * * Requires Authentication
     *
     * * Requires Janitor
     *
     * @param {number} id - the id of the artist to delete
     * @returns {Promise<null>}
     */
    delete(id: number): Promise<null>;
    /**
     * Revert an artist to a previous version
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the artist to revert
     * @param {number} versionID - the version id to revert to (see history)
     */
    revert(id: number, versionID: number): Promise<null>;
    /**
     * Get a specific artist history
     *
     * @param {number} id - the id of the history to get
     * @returns {Promise<ArtistHistory | null>}
     */
    getHistory(id: number): Promise<ArtistHistory | null>;
    /**
     * Search the artist history
     *
     * * Requires Authentication
     *
     * @param {object} [options]
     * @param {number} [options.id] - get a specific artist history entry
     * @param {string} [options.artist] - narrow the results by artist name
     * @param {number} [options.artist_id] - narrow the results by artist id
     * @param {number} [options.updater_id] - narrow the results by updater id
     * @param {string} [options.updater] - narrow the results by updater name
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<ArtistHistory>>}
     */
    searchHistory(options?: SearchArtistHistoryOptions): Promise<ArtistHistory[]>;
    /**
     * Get the list of do not post & conditional do not post artists.
     *
     * This assumes whatever instance you're running against has the same structure as e621!
     *
     * @param {number} [id=85] - the id of the dnp wiki page (85 on e621)
     * @returns {Promise<DoNotPostList>}
     */
    getDoNotPost(id?: number): Promise<{
        dnp: string[];
        conditionalDNP: string[];
    }>;
}
