import type E621 from "..";
import Pool from "../structures/Pool";
import PoolHistory from "../structures/PoolHistory";
import type { SearchPoolsOptions, CreatePoolOptions, ModifyPoolOptions, SearchPoolHistoryOptions } from "../types";
export default class Pools {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a pool by its id
     *
     * @param {number} id - The id of the pool to get
     * @returns {Promise<(Pool | null)>}
     */
    get(id: number): Promise<Pool | null>;
    /**
     * Get a pool by its name
     *
     * @param {string} name - The name of the pool to get
     * @returns {Promise<(Pool | null)>}
     */
    getByName(name: string): Promise<Pool | null>;
    /**
     * Search for pools
     *
     * @param {object} [options]
     * @param {string} [options.name] - narrow the results by the name of the pool
     * @param {string} [options.description] - narrow the results by the description of the pool
     * @param {string} [options.creator] - narrow the results by the (name of the) creator of the pool
     * @param {boolean} [options.active] - narrow the results by the pool being active or not
     * @param {PoolCategory} [options.category] - narrow the results by the category of the pool
     * @param {SearchPoolsOrder} [options.order] - the order of the results
     * @param {number} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<Pool>>}
     */
    search(options?: SearchPoolsOptions): Promise<Pool[]>;
    /**
     * Create a pool
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} options.name - the name of the pool
     * @param {string} [options.description] - the description of the pool
     * @param {Array<number>} [options.posts] - the posts to add to the pool
     * @param {PoolCategory} options.category - the category of the pool
     * @param {boolean} [options.active] - if the pool is active
     * @returns {Promise<Pool>}
     */
    create(options: CreatePoolOptions): Promise<Pool>;
    /**
     * modify a pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to edit
     * @param {object} options
     * @param {string} [options.name] - the name of the pool
     * @param {string} [options.description] - the description of the pool
     * @param {Array<number>} [options.posts] - the posts to include in the pool (this will override all currently included posts)
     * @param {boolean} [options.category] - the category of the pool
     * @param {boolean} [options.active] - if the pool is active
     * @returns {Promise<Pool>}
     */
    modify(id: number, options: ModifyPoolOptions): Promise<Pool>;
    /**
     * Delete a pool
     *
     * * Requires Authentication
     *
     * * Requires Janitor
     *
     * @param {number} id - the id of the pool to delete
     * @returns {Promise<null>}
     */
    delete(id: number): Promise<null>;
    /**
     * Revert a pool to a previous version
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to revert
     * @param {number} versionID - the version id to revert to (see history)
     */
    revert(id: number, versionID: number): Promise<null>;
    /**
     * Get a specific pools history
     *
     * @param {number} id - the id of the history to get
     * @returns {Promise<PoolHistory | null>}
     */
    getHistory(id: number): Promise<PoolHistory | null>;
    /**
     * Search the pool history
     *
     * * Requires Authentication
     *
     * @param {object} [options]
     * @param {number} [options.id] - get a specific pools history entry
     * @param {number} [options.pool] - narrow the results by the pool id
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<PoolHistory>>}
     */
    searchHistory(options?: SearchPoolHistoryOptions): Promise<PoolHistory[]>;
    /**
     * Add a post to a pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to add to
     * @param {(Array<number> | number)} posts - the post id (or multiple) to add to the pool
     * @returns {Promise<Pool>}
     */
    addPost(id: number, posts: Array<number> | number): Promise<Pool>;
    get addPosts(): (id: number, posts: number | number[]) => Promise<Pool>;
    /**
     * Remove a post from a pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to remove from
     * @param {(Array<number> | number)} posts - the post id (or multiple) to remove from the pool
     * @returns {Promise<Pool>}
     */
    removePost(id: number, posts: Array<number> | number): Promise<Pool>;
    get removePosts(): (id: number, posts: number | number[]) => Promise<Pool>;
}
