import type E621 from "..";
import type { SearchNotesOptions, CreateNoteOptions, ModifyNoteOptions, SearchNoteHistoryOptions } from "../types";
import Note from "../structures/Note";
import NoteHistory from "../structures/NoteHistory";
export default class Notes {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a note by its id
     *
     * @param {number} id - The id of the note to get
     * @returns {Promise<(Note | null)>}
     */
    get(id: number): Promise<Note | null>;
    /**
     * Search for notes
     *
     * @param {object} [options]
     * @param {string} [options.body] - narrow the results by the body of the note
     * @param {string} [options.author] - narrow the results by the (name of the) creator of the note
     * @param {(string | Array<string>)} [options.tags] - narrow the results by the tags of the post the note is on
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<Note>>}
     */
    search(options?: SearchNotesOptions): Promise<Note[]>;
    /**
     * Create a note
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {number} options.post_id - the id of the post to make the note on
     * @param {number} options.x - the x location of the note
     * @param {number} options.y - the y location of the note
     * @param {number} options.width - the width of the note
     * @param {number} options.height - the height of the note
     * @param {string} options.body - the body of the note
     * @returns {Promise<Note>}
     */
    create(options: CreateNoteOptions): Promise<never[] | Note>;
    /**
     * modify a note
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the note to edit
     * @param {object} options
     * @param {number} [options.x] - the x location of the note
     * @param {number} [options.y] - the y location of the note
     * @param {number} [options.width] - the width of the note
     * @param {number} [options.height] - the height of the note
     * @param {string} [options.body] - the body of the note
     * @returns {Promise<Note>}
     */
    modify(id: number, options: ModifyNoteOptions): Promise<Note>;
    /**
     * Delete a note
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the note to delete
     * @returns {Promise<null>}
     */
    delete(id: number): Promise<null>;
    /**
     * Get a specific notes history
     *
     * @param {number} id - the id of the history to get
     * @returns {Promise<NoteHistory | null>}
     */
    getHistory(id: number): Promise<NoteHistory | null>;
    /**
     * Search the notes history
     *
     * @param {object} [options]
     * @param {number} [options.id] - get a specific notes history entry
     * @param {number} [options.note_id] - narrow the results by the note id
     * @param {number} [options.post_id] - narrow the results by the id of the post the note is on
     * @param {string} [options.body] - narrow the results by the content
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<NoteHistory>>}
     */
    searchHistory(options?: SearchNoteHistoryOptions): Promise<NoteHistory[]>;
}
