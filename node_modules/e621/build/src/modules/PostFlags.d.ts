import type E621 from "..";
import type { SearchPostFlagsOptions, CreatePostFlagOptions } from "../types";
import PostFlag from "../structures/PostFlag";
export default class PostFlags {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a post flag by its id
     *
     * @param {number} id - The id of the post flag to get
     * @returns {Promise<(PostFlag | null)>}
     */
    get(id: number): Promise<PostFlag | null>;
    /**
     * Search for post flags
     *
     * @param {object} [options]
     * @param {string} [options.reason] - narrow the results by the provided reason
     * @param {(string | Array<string>)} [options.tags] - narrow the results by the tags of the flagged post
     * @param {number} [options.post_id] - narrow the results by the id of the post flag
     * @param {number} [options.creator] - narrow the results by the creator name of the post flag (requires janitor if not self)
     * @param {number} [options.creator_id] - narrow the results by the creator id of the post flag (requires janitor if not self)
     * @param {number} [options.ip_addres] - narrow the results by the creator ip of the post flag (requries moderator)
     * @param {boolean} [options.resolved] - if the flag as been marked as resolved
     * @param {PostFlagCategory} [options.category] - narrow the results by the category of the post flag
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<PostFlag>>}
     */
    search(options?: SearchPostFlagsOptions): Promise<PostFlag[]>;
    /**
     * Create a post flag
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {number} options.post_id - the id of the post to flag
     * @param {PostFlagReasons} options.reason_name - the reason for flagging the post
     * @param {number} [options.parent_id] - a post id for `previously_deleted` & `inferior`
     * @returns {Promise<PostFlag>}
     */
    create(options: CreatePostFlagOptions): Promise<PostFlag>;
    /**
     * Unflag a post
     *
     * * Requires Authentication
     *
     * * Requires Janitor
     *
     * @param {number} post_id - the id of post to unflag
     * @returns {Promise<null>}
     */
    delete(post_id: number): Promise<null>;
}
