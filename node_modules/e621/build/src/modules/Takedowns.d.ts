import type E621 from "..";
import type { SearchTakedownsOptions, CreateTakedownOptions, ModifyTakedownOptions } from "../types";
import Takedown from "../structures/Takedown";
export default class Takedowns {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a takedown by its id
     *
     * @param {number} id - The id of the note to get
     * @returns {Promise<(Takedown | null)>}
     */
    get(id: number): Promise<Takedown | null>;
    /**
     * Search for takedowns
     *
     * @param {object} [options]
     * @param {TakedownStatus} [options.status] - narrow the results by status
     * @param {string} [options.source] - narrow the results by source (requires admin)
     * @param {string} [options.reason] - narrow the results by reason (requires admin)
     * @param {string} [options.admin_response] - narrow the results by admin response (requires admin)
     * @param {boolean} [options.reason_hidden] - narrow the results by if the reason is hidden (requires admin)
     * @param {string} [options.instructions] - narrow the results by special instructions (requires admin)
     * @param {number} [options.post_id] - narrow the results by post id (requires admin)
     * @param {string} [options.email] - narrow the results by email (requires admin)
     * @param {string} [options.ip_address] - narrow the results by ip address (requires admin)
     * @param {string} [options.vericode] - narrow the results by verification code (requires admin)
     * @param {SearchTakedownsOrder} [options.order] - the order of th returned results
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<Takedown>>}
     */
    search(options?: SearchTakedownsOptions): Promise<Takedown[]>;
    /**
     * Create a takedown
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} options.source - the source of the takedown
     * @param {string} options.email - a valid email for the takedown
     * @param {(number | Array<number> | string | Array<string>)} [options.post_ids] - post ids or full post urls the takedown concerns (this and instructions are mutally exclusive)
     * @param {string} [options.instructions] - a set of special instructions (this and post_ids are mutally exclusive)
     * @param {string} options.reason - the reason for the takedown
     * @param {boolean} [options.reason_hidden=false] - the hide the reason of the takedown
     * @returns {Promise<Takedown>}
     */
    create(options: CreateTakedownOptions): Promise<Takedown>;
    /**
     * modify a takedown
     *
     * * Requires Authentication
     *
     * * Requires Admin
     *
     * @param {number} id - the id of the takedown to edit
     * @param {object} options
     * @param {boolean} [options.process_takedown] - if the takedown should be processed
     * @param {string} [options.delete_reason] - the reason to add to posts that are deleted
     * @param {Record<string | number, boolean>} [options.takedown_posts] - object of id-boolean values, false = keep, true = delete
     * @param {string | Array<string>} [options.takedown_add_posts_tags] - list of tags to match and add to the takedown
     * @param {number | Array<number>} [options.takedown_add_posts_ids] - list of posts to add to the takedown
     * @param {("pending" | "inactive")} [options.status] - mark the takedown inactive or not
     * @param {string} [options.notes] - admin notes
     * @param {boolean} [options.reason_hidden] - if the reason should be hidden
     * @returns {Promise<Takedown>}
     */
    modify(id: number, options: ModifyTakedownOptions): Promise<Takedown>;
    /**
     * Delete a takedown
     *
     * * Requires Authentication
     *
     * * Requires Admin
     *
     * @param {number} id - the id of the takedownto delete
     * @returns {Promise<null>}
     */
    delete(id: number): Promise<null>;
}
