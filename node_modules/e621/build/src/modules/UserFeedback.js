"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const FormHelper_1 = __importDefault(require("../util/FormHelper"));
const RequestHandler_1 = require("../util/RequestHandler");
class UserFeedback {
    auth;
    main;
    constructor(main) {
        Object.defineProperties(this, {
            auth: {
                get() {
                    return !this.main.options.authUser || !this.main.options.authKey ? null : `Basic ${Buffer.from(`${this.main.options.authUser}:${this.main.options.authKey}`).toString("base64")}`;
                },
                configurable: false,
                enumerable: false
            },
            main: {
                value: main,
                configurable: false,
                enumerable: false,
                writable: false
            }
        });
    }
    /**
     * Get a specific user feedback
     *
     * @param {number} id - The id of the feedback to fetch
     * @returns {Promise<(UserFeedbackProperties | null)>}
     */
    async get(id) {
        const res = await this.main.request.get(`/user_feedbacks/${id}.json`).catch(err => {
            if (err instanceof RequestHandler_1.APIError && err.statusCode === 404)
                return null;
            throw err;
        });
        return res;
    }
    /**
     * Search for user feedback
     *
     * @param {object} [options]
     * @param {string} [options.username] - narrow the search by a specific target
     * @param {string} [options.creator] - narrow the search by a specific creator
     * @param {string} [options.body] - narrow the search by the content of the feedback
     * @param {FeedbackCategories} [options.category] - narrow the search by the type
     * @param {(number |`${"" | "a" | "b"}${number}`)} [page] - page of results to get
     * @param {number} [options.limit] - limit the maximum returned results
     * @returns {Promise<Array<UserFeedbackProperties>>}
     */
    async search(options) {
        options = options ?? {};
        const qs = new FormHelper_1.default();
        if (typeof options.username === "string")
            qs.add("search[user_name]", options.username);
        if (typeof options.creator === "string")
            qs.add("search[creator_name]", options.creator);
        if (typeof options.body === "string")
            qs.add("search[body_matches]", options.body);
        if (typeof options.category === "string")
            qs.add("search[category]", options.category);
        if (typeof options.page !== "undefined")
            qs.add("page", options.page);
        if (typeof options.limit === "number")
            qs.add("limit", options.limit);
        const res = await this.main.request.get(`/user_feedbacks.json?${qs.build()}`);
        if (res && !Array.isArray(res) && "user_feedbacks" in res)
            return [];
        return res;
    }
    /**
     * Add feedback to a user
     *
     * * Requires Authentication
     *
     * * Requires Moderator
     *
     * @param {object} options
     * @param {string} options.username - the user the feedback is for
     * @param {FeedbackCategories} options.category - the type of feedback
     * @param {string} options.body - the content of the feedback
     * @returns {Promise<UserFeedbackProperties>}
     */
    async create(options) {
        this.main.request.authCheck.call(this, "UserFeedback#create");
        const qs = new FormHelper_1.default()
            .add("user_feedback[user_name]", options.username)
            .add("user_feedback[category]", options.category)
            .add("user_feedback[body]", options.body);
        const res = await this.main.request.post("/user_feedbacks.json", qs.build());
        return res;
    }
    /**
     * Modify an existing user feedback
     *
     * * Requires Authentication
     *
     * * Requires Moderator
     *
     * @param {number} id - the id of the feedback to edit
     * @param {object} options
     * @param {string} [options.body] - the content of the feedback
     * @param {FeedbackCategories} [options.category] - the type of feedback
     * @returns {Promise<UserFeedbackProperties>}
     */
    async modify(id, options) {
        this.main.request.authCheck.call(this, "UserFeedback#modify");
        const qs = new FormHelper_1.default();
        if (options.body)
            qs.add("user_feedback[body]", options.body);
        if (options.category)
            qs.add("user_feedback[category]", options.category);
        const res = await this.main.request.patch(`/user_feedbacks/${id}.json`, qs.build());
        return res;
    }
    /**
     * Delete an existing user feedback
     *
     * * Requires Authentication
     *
     * * Requires Moderator
     *
     * @param {number} id - the id of the feedback to delete
     * @returns {Promise<null>}
     */
    async delete(id) {
        this.main.request.authCheck.call(this, "UserFeedback#delete");
        const res = await this.main.request.delete(`/user_feedbacks/${id}.json`);
        return res;
    }
}
exports.default = UserFeedback;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlckZlZWRiYWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvVXNlckZlZWRiYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBUUEsb0VBQTRDO0FBQzVDLDJEQUFrRDtBQUVsRCxNQUFxQixZQUFZO0lBQ2YsSUFBSSxDQUFnQjtJQUNwQixJQUFJLENBQU87SUFDNUIsWUFBWSxJQUFVO1FBQ3JCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUU7WUFDN0IsSUFBSSxFQUFFO2dCQUNMLEdBQUc7b0JBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztnQkFDbkwsQ0FBQztnQkFDRCxZQUFZLEVBQUUsS0FBSztnQkFDbkIsVUFBVSxFQUFJLEtBQUs7YUFDbkI7WUFDRCxJQUFJLEVBQUU7Z0JBQ0wsS0FBSyxFQUFTLElBQUk7Z0JBQ2xCLFlBQVksRUFBRSxLQUFLO2dCQUNuQixVQUFVLEVBQUksS0FBSztnQkFDbkIsUUFBUSxFQUFNLEtBQUs7YUFDbkI7U0FDRCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQVU7UUFDbkIsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQXlCLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFD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