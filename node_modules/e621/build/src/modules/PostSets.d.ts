import type E621 from "..";
import PostSet from "../structures/PostSet";
import type { SearchPostSetsOptions, CreatePostSetOptions, ModifyPostSetOptions } from "../types";
export default class PostSets {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a post set by its id
     *
     * @param {(number | string)} id - The id of the post set to get
     * @returns {Promise<(PostSet | null)>}
     */
    get(id: number | string): Promise<PostSet | null>;
    /**
     * Get a post set by its name
     *
     * @param {string} name - The name of the post set to get
     * @returns {Promise<(PostSet | null)>}
     */
    getByName(name: string): Promise<PostSet | null>;
    /**
     * Get a post set by its short name
     *
     * @param {string} name - The short name of the post set to get
     * @returns {Promise<(PostSet | null)>}
     */
    getByShortName(shortname: string): Promise<PostSet | null>;
    /**
     * Search for post sets
     *
     * @param {object} [options]
     * @param {string} [options.name] - the name of the set
     * @param {string} [options.shortname] - the shortname of the set
     * @param {string} [options.username] - the creator of the set
     * @param {SearchPostSetsOrder} [options.order] - the order of the results
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<PostSet>>}
     */
    search(options?: SearchPostSetsOptions): Promise<PostSet[]>;
    /**
     * Create a post set
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} options.name - the name of the set
     * @param {string} options.shortname - the shortname of the set
     * @param {string} [options.description] - the description of the set
     * @param {boolean} [options.public] - if the set is public
     * @param {boolean} [options.transfer_on_deletion] - if deleted posts should be replaced with parents
     * @returns {Promise<PostSet>}
     */
    create(options: CreatePostSetOptions): Promise<PostSet>;
    /**
     * modify a set
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the set to edit
     * @param {object} options
     * @param {string} [options.name] - the name of the set
     * @param {string} [options.shortname] - the short name of the set
     * @param {string} [options.description] - the description of the set
     * @param {boolean} [options.active] - if the set is public
     * @param {boolean} [options.transfer_on_deletion] - if deleted posts should be replaced with parents
     * @returns {Promise<PostSet>}
     */
    modify(id: number, options: ModifyPostSetOptions): Promise<PostSet>;
    /**
     * Delete a set
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the set to delete
     * @returns {Promise<null>}
     */
    delete(id: number): Promise<null>;
    /**
     * Add a post (or multiple) to a set
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the set to add to
     * @param {(Array<number> | number)} posts - the post id (or multiple) to add to the set
     * @returns {Promise<PostSet>}
     */
    addPost(id: number, posts: Array<number> | number): Promise<PostSet>;
    get addPosts(): (id: number, posts: number | number[]) => Promise<PostSet>;
    /**
     * Remove a post (or multiple) from a set
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the set to remove from
     * @param {(Array<number> | number)} posts - the post id (or multiple) to remove from the set
     * @returns {Promise<PostSet>}
     */
    removePost(id: number, posts: Array<number> | number): Promise<PostSet>;
    get removePosts(): (id: number, posts: number | number[]) => Promise<PostSet>;
}
