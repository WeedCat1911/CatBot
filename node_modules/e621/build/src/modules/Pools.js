"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Pool_1 = __importDefault(require("../structures/Pool"));
const PoolHistory_1 = __importDefault(require("../structures/PoolHistory"));
const FormHelper_1 = __importDefault(require("../util/FormHelper"));
const RequestHandler_1 = require("../util/RequestHandler");
class Pools {
    auth;
    main;
    constructor(main) {
        Object.defineProperties(this, {
            auth: {
                get() {
                    return !this.main.options.authUser || !this.main.options.authKey ? null : `Basic ${Buffer.from(`${this.main.options.authUser}:${this.main.options.authKey}`).toString("base64")}`;
                },
                configurable: false,
                enumerable: false
            },
            main: {
                value: main,
                configurable: false,
                enumerable: false,
                writable: false
            }
        });
    }
    /**
     * Get a pool by its id
     *
     * @param {number} id - The id of the pool to get
     * @returns {Promise<(Pool | null)>}
     */
    async get(id) {
        const res = await this.main.request.get(`/pools/${id}.json`).catch(err => {
            if (err instanceof RequestHandler_1.APIError && err.statusCode === 404)
                return null;
            throw err;
        });
        return res === null ? null : new Pool_1.default(this.main, res);
    }
    /**
     * Get a pool by its name
     *
     * @param {string} name - The name of the pool to get
     * @returns {Promise<(Pool | null)>}
     */
    async getByName(name) {
        return this.search({
            name,
            limit: 1
        }).then(r => r.length === 0 ? null : r[0]);
    }
    /**
     * Search for pools
     *
     * @param {object} [options]
     * @param {string} [options.name] - narrow the results by the name of the pool
     * @param {string} [options.description] - narrow the results by the description of the pool
     * @param {string} [options.creator] - narrow the results by the (name of the) creator of the pool
     * @param {boolean} [options.active] - narrow the results by the pool being active or not
     * @param {PoolCategory} [options.category] - narrow the results by the category of the pool
     * @param {SearchPoolsOrder} [options.order] - the order of the results
     * @param {number} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<Pool>>}
     */
    async search(options) {
        options = options ?? {};
        const qs = new FormHelper_1.default();
        if (typeof options.name === "string")
            qs.add("search[name_matches]", options.name);
        if (typeof options.description === "string")
            qs.add("search[description_matches]", options.description);
        if (typeof options.creator === "string")
            qs.add("search[creator_name]", options.creator);
        if (typeof options.active === "boolean")
            qs.add("search[is_active]", options.active);
        if (typeof options.category === "string")
            qs.add("search[category]", options.category);
        if (typeof options.order === "string")
            qs.add("search[order]", options.order);
        if (typeof options.page === "number")
            qs.add("page", options.page);
        if (typeof options.limit === "number")
            qs.add("limit", options.limit);
        const res = await this.main.request.get(`/pools.json?${qs.build()}`);
        return res.map(info => new Pool_1.default(this.main, info));
    }
    /**
     * Create a pool
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} options.name - the name of the pool
     * @param {string} [options.description] - the description of the pool
     * @param {Array<number>} [options.posts] - the posts to add to the pool
     * @param {PoolCategory} options.category - the category of the pool
     * @param {boolean} [options.active] - if the pool is active
     * @returns {Promise<Pool>}
     */
    async create(options) {
        this.main.request.authCheck.call(this, "Pools#create");
        if (!options)
            throw new Error("options is required in Pools#create");
        const qs = new FormHelper_1.default()
            .add("pool[name]", options.name)
            .add("pool[category]", options.category);
        if (typeof options.description === "string")
            qs.add("pool[description]", options.description);
        if (typeof options.active === "boolean")
            qs.add("pool[is_active]", options.active);
        if (Array.isArray(options.posts) && options.posts.length > 0)
            qs.add("pool[post_ids_string]", options.posts.join(" "));
        const res = await this.main.request.post("/pools.json", qs.build());
        return new Pool_1.default(this.main, res);
    }
    /**
     * modify a pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to edit
     * @param {object} options
     * @param {string} [options.name] - the name of the pool
     * @param {string} [options.description] - the description of the pool
     * @param {Array<number>} [options.posts] - the posts to include in the pool (this will override all currently included posts)
     * @param {boolean} [options.category] - the category of the pool
     * @param {boolean} [options.active] - if the pool is active
     * @returns {Promise<Pool>}
     */
    async modify(id, options) {
        this.main.request.authCheck.call(this, "Pools#modify");
        if (!options)
            throw new Error("options is required in Pools#modify");
        const qs = new FormHelper_1.default();
        if (typeof options.name === "string")
            qs.add("pool[name]", options.name);
        if (typeof options.description === "string")
            qs.add("pool[description]", options.description);
        if (typeof options.category === "string")
            qs.add("pool[category]", options.category);
        if (typeof options.active === "boolean")
            qs.add("pool[is_active]", options.active);
        if (Array.isArray(options.posts) && options.posts.length > 0)
            qs.add("pool[post_ids]", options.posts.join(" "));
        const res = await this.main.request.put(`/pools/${id}.json`, qs.build());
        return new Pool_1.default(this.main, res);
    }
    /**
     * Delete a pool
     *
     * * Requires Authentication
     *
     * * Requires Janitor
     *
     * @param {number} id - the id of the pool to delete
     * @returns {Promise<null>}
     */
    async delete(id) {
        this.main.request.authCheck.call(this, "Pools#delete");
        return this.main.request.delete(`/pools/${id}.json`);
    }
    /**
     * Revert a pool to a previous version
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to revert
     * @param {number} versionID - the version id to revert to (see history)
     */
    async revert(id, versionID) {
        this.main.request.authCheck.call(this, "Pools#revert");
        const qs = new FormHelper_1.default()
            .add("version_id", versionID);
        return this.main.request.put(`/pools/${id}/revert.json`, qs.build());
    }
    /**
     * Get a specific pools history
     *
     * @param {number} id - the id of the history to get
     * @returns {Promise<PoolHistory | null>}
     */
    async getHistory(id) { return this.searchHistory({ id }).then(r => r.length === 0 ? null : r[0]); }
    /**
     * Search the pool history
     *
     * * Requires Authentication
     *
     * @param {object} [options]
     * @param {number} [options.id] - get a specific pools history entry
     * @param {number} [options.pool] - narrow the results by the pool id
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<PoolHistory>>}
     */
    async searchHistory(options) {
        options = options ?? {};
        const qs = new FormHelper_1.default();
        if (typeof options.id === "number")
            qs.add("search[id]", options.id);
        if (typeof options.pool === "number")
            qs.add("search[pool_id]", options.pool);
        if (typeof options.page !== "undefined")
            qs.add("page", options.page);
        if (typeof options.limit === "number")
            qs.add("limit", options.limit);
        const res = await this.main.request.get(`/pool_versions.json?${qs.build()}`);
        if (res && !Array.isArray(res) && "pool_archives" in res)
            return [];
        return res.map(info => new PoolHistory_1.default(this.main, info));
    }
    /**
     * Add a post to a pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to add to
     * @param {(Array<number> | number)} posts - the post id (or multiple) to add to the pool
     * @returns {Promise<Pool>}
     */
    async addPost(id, posts) {
        this.main.request.authCheck.call(this, "Pools#addPost");
        const old = await this.get(id);
        if (old === null)
            throw new Error("invalid pool id given to Pools#addPost");
        if (!Array.isArray(posts))
            posts = [posts];
        return this.modify(id, {
            posts: [...old.post_ids, ...posts]
        });
    }
    get addPosts() { return this.addPost.bind(this); }
    /**
     * Remove a post from a pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to remove from
     * @param {(Array<number> | number)} posts - the post id (or multiple) to remove from the pool
     * @returns {Promise<Pool>}
     */
    async removePost(id, posts) {
        this.main.request.authCheck.call(this, "Pools#removePost");
        const old = await this.get(id);
        if (old === null)
            throw new Error("invalid pool id given to Pools#addPost");
        if (!Array.isArray(posts))
            posts = [posts];
        return this.modify(id, {
            posts: old.post_ids.filter(p => !posts.includes(p))
        });
    }
    get removePosts() { return this.removePost.bind(this); }
}
exports.default = Pools;
//# sourceMappingURL=data:application/json;base64,