import type E621 from "..";
import AuthenticatedUser from "../structures/AuthenticatedUser";
import Post from "../structures/Post";
import User from "../structures/User";
import type { UploadLimit, SearchUsersOptions, EditSelfUserOptions } from "../types";
export default class Users {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a user by their id or username
     *
     * Use `getSelf` to get the currently authenticated user
     *
     * @param {(number | string)} idOrname - The id or username of the user to get
     * @returns {Promise<(User | null)>}
     */
    get(idOrName: number | string): Promise<User | null>;
    /**
     * Get a user by their name
     *
     * @param {string} name - The name of the user to get
     * @returns {Promise<(User | null)>}
     */
    getByName(name: string): Promise<User | null>;
    /**
     * Search for users
     *
     * @param {object} [options]
     * @param {string} [options.name] - narrow the search by usernames
     * @param {string} [options.email] - narrow the search by email (requires admin)
     * @param {number} [options.level] - narrow the search by user level
     * @param {number} [options.min_level] - narrow the search by minimum user level
     * @param {number} [options.max_level] - narrow the search by maximum user level
     * @param {boolean} [options.unrestricted_uploads] - narrow the search by unrestricted uploaders
     * @param {boolean} [options.approver] - narrow the search by approvers
     * @param {SearchUsersOrder} [options.order] - order the search results
     * @param {(number |`${"" | "a" | "b"}${number}`)} - page to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<User>>}
     */
    search(options?: SearchUsersOptions): Promise<User[]>;
    /**
     * Get the currently authenticated user
     *
     * * Authentication Required
     *
     * @returns {Promise<AuthenticatedUser>}
     */
    getSelf(): Promise<AuthenticatedUser>;
    /**
     * Edit the authenticated user
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {(number | null)} [options.avatar_id] - post id to use as avatar
     * @param {string} [options.about] - about section
     * @param {string} [options.artinfo] - commissions section
     * @param {Timezones} [options.timezone] - timezone
     * @param {boolean} [options.receive_email_notifications] - if you should receive notifications via email
     * @param {number} [options.comment_threshold] - the threshold at which comments should be hidden (usually negative)
     * @param {DefaultImageSize} [options.default_image_size] - default image display size
     * @param {number} [options.posts_per_page] - default posts per page, between 25 and 250
     * @param {boolean} [options.safe_mode] - toggle safe mode
     * @param {(Array<string> | string)} [options.blacklisted_tags] - the list of tags to hide in searches
     * @param {boolean} [options.blacklist_users] - hide things from users that have been blocked from the site
     * @param {boolean} [options.colored_usernames] - Color each user's name depending on their level. See the [legend](https://e621.net/wiki_pages/e621:colored_usernames) for what the colors are.
     * @param {boolean} [options.enable_keyboard_shortcuts] - Enables the use of keyboard shortcuts for a majority of site actions related to posts. A list of keyboard shortcuts is available [here](https://e621.net/static/keyboard_shortcuts).
     * @param {boolean} [options.enable_auto_complete] - Enables auto-completion on most tag and user entry fields.
     * @param {boolean} [options.enable_privacy_mode] - Makes a cursory effort to prevent showing your favorites to others users. Has not been well tested.
     * @param {boolean} [options.enable_post_statistics] - Show post statistics below posts on search pages.
     * @param {boolean} [options.description_collapsed] - Don't expand post descriptions on page load.
     * @param {boolean} [options.hide_comments] - Do not show the comments section on post pages.
     * @param {boolean} [options.disable_cropped_thumbnails] - Prevent other users from sending you DMails. You will be prevented from sending DMails to non-staff members while this option is enabled. Staff are always allowed to send you DMails.
     * @param {boolean} [options.show_own_hidden_comments] - Disables displaying cropped thumbnails on the mobile layout of the site in favor of scaled thumbnails. Has no effect on the desktop site.
     * @param {boolean} [options.enable_compact_uploader] - Show your own hidden comments on comment pages.
     * @param {string} [options.dmail_filter] - A list of banned words (space delimited). Any dmail you receive with a banned word will automatically be deleted.
     * @param {string} [options.frequent_tags] - A list of tags that you use often. They will appear when using the list of Related Tags.
     * @param {boolean} [options.disable_responsive_mode] - Disable alternative layout for mobile and tablet.
     * @param {string} [options.custom_css_style] - Style to apply to the whole site.
     * @returns {Promise<null>}
     */
    editSelf(options: EditSelfUserOptions): Promise<null>;
    /**
     * Get the authenticated user's /users/upload_limit (best way I can find to find out who you are)
     *
     * * Authentication Required
     *
     * @returns {Promise<UploadLimit>}
     */
    getUploadLimit(): Promise<UploadLimit>;
    /**
     * Get the favorites of a user
     *
     * @param {number} [id] - the id of the user to get favorites for, or none to get the authenticated user, if provided
     */
    getFavorites(id?: number): Promise<Post[]>;
    /**
     * Add a favorite
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the post to favorite
     * @returns {Promise<Post>}
     */
    addFavorite(id: number): Promise<Post>;
    /**
     * Remove a favorite
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the post to unfavorite
     * @returns {Promise<null>}
     */
    removeFavorite(id: number): Promise<null>;
}
