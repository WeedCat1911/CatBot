import type E621 from "..";
import type { UserFeedbackProperties, SearchUserFeedbackOptions, CreateUserFeedbackOptions, ModifyUserFeedbackOptions } from "../types";
export default class UserFeedback {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a specific user feedback
     *
     * @param {number} id - The id of the feedback to fetch
     * @returns {Promise<(UserFeedbackProperties | null)>}
     */
    get(id: number): Promise<UserFeedbackProperties | null>;
    /**
     * Search for user feedback
     *
     * @param {object} [options]
     * @param {string} [options.username] - narrow the search by a specific target
     * @param {string} [options.creator] - narrow the search by a specific creator
     * @param {string} [options.body] - narrow the search by the content of the feedback
     * @param {FeedbackCategories} [options.category] - narrow the search by the type
     * @param {(number |`${"" | "a" | "b"}${number}`)} [page] - page of results to get
     * @param {number} [options.limit] - limit the maximum returned results
     * @returns {Promise<Array<UserFeedbackProperties>>}
     */
    search(options?: SearchUserFeedbackOptions): Promise<UserFeedbackProperties[]>;
    /**
     * Add feedback to a user
     *
     * * Requires Authentication
     *
     * * Requires Moderator
     *
     * @param {object} options
     * @param {string} options.username - the user the feedback is for
     * @param {FeedbackCategories} options.category - the type of feedback
     * @param {string} options.body - the content of the feedback
     * @returns {Promise<UserFeedbackProperties>}
     */
    create(options: CreateUserFeedbackOptions): Promise<UserFeedbackProperties>;
    /**
     * Modify an existing user feedback
     *
     * * Requires Authentication
     *
     * * Requires Moderator
     *
     * @param {number} id - the id of the feedback to edit
     * @param {object} options
     * @param {string} [options.body] - the content of the feedback
     * @param {FeedbackCategories} [options.category] - the type of feedback
     * @returns {Promise<UserFeedbackProperties>}
     */
    modify(id: number, options: ModifyUserFeedbackOptions): Promise<UserFeedbackProperties>;
    /**
     * Delete an existing user feedback
     *
     * * Requires Authentication
     *
     * * Requires Moderator
     *
     * @param {number} id - the id of the feedback to delete
     * @returns {Promise<null>}
     */
    delete(id: number): Promise<null>;
}
