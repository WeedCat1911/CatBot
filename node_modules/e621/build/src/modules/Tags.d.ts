import type E621 from "..";
import Tag from "../structures/Tag";
import TagHistory from "../structures/TagHistory";
import type { SearchTagsOptions, ModifyTagOptions, SearchTagHistoryOptions, AutocompleteResult } from "../types";
export default class Tags {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a tag by its id
     *
     * @param {number} id - The id of the tag to get
     * @returns {Promise<(Tag | null)>}
     */
    get(id: number): Promise<Tag | null>;
    /**
     * Get a tag by its name
     *
     * @param {string} name - The name of the tag to get
     * @returns {Promise<(Tag | null)>}
     */
    getByName(name: string): Promise<Tag | null>;
    /**
     * Search for tags
     *
     * @param {object} [options]
     * @param {string} [options.name] - narrow the results by the name of the tag
     * @param {number} [options.category] - narrow the results by the category of the tag
     * @param {boolean} [options.hide_empty] - narrow the results by the tag being empty or not
     * @param {boolean} [options.has_wiki] - narrow the results by the tag having a wiki or not
     * @param {boolean} [options.has_artist] - narrow the results by the tag having an artist or not
     * @param {SearchTagsOrder} [options.order] - the order of the results
     * @param {number} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<Tag>>}
     */
    search(options?: SearchTagsOptions): Promise<Tag[]>;
    /**
     * modify a tag
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the tag to edit
     * @param {object} options
     * @param {number} [options.category] - the category of the tag
     * @param {boolean} [options.locked] - if the tag is locked (requires moderator)
     * @returns {Promise<Tag>}
     */
    modify(id: number, options: ModifyTagOptions): Promise<Tag>;
    /**
     * Get a specific tag type history
     *
     * @param {number} id - the id of the history to get
     * @returns {Promise<TagHistory | null>}
     */
    getHistory(id: number): Promise<TagHistory | null>;
    /**
     * Search the tag type history
     *
     * @param {object} [options]
     * @param {number} [options.id] - get a specific tag type history entry
     * @param {string} [options.tag] - narrow the results by the tag name
     * @param {string} [options.user] - narrow the results by the editor name
     * @param {number} [options.user_id] - narrow the results by the editor id
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<TagHistory>>}
     */
    searchHistory(options?: SearchTagHistoryOptions): Promise<TagHistory[]>;
    /**
     * Get autocomplete results
     *
     * @param {string} match - the string to get results for
     * @returns {Promise<Array<AutocompleteResult>>}
     */
    getAutocomplete(match: string): Promise<AutocompleteResult[] | null>;
}
