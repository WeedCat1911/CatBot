import type E621 from "..";
import WikiPage from "../structures/WikiPage";
import type { SearchWikiPagesOptions, CreateWikiPageOptions, ModifyWikiPageOptions, SearchWikiPageHistoryOptions } from "../types";
import WikiPageHistory from "../structures/WikiPageHistory";
export default class WikiPages {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a wiki page by its id
     *
     * @param {number} id - The id of the wiki page to get
     * @returns {Promise<(WikiPage | null)>}
     */
    get(id: number): Promise<WikiPage | null>;
    /**
     * Get a wiki page by its title
     *
     * @param {string} title - The title of the wiki page to get
     * @returns {Promise<(WikiPage | null)>}
     */
    getByTitle(title: string): Promise<WikiPage | null>;
    /**
     * Search for wiki pages
     *
     * @param {object} [options]
     * @param {string} [options.title] - narrow the results by the title of the wiki page
     * @param {string} [options.creator] - narrow the results by the (name of the) creator of the wiki page
     * @param {string} [options.body] - narrow the results by the content of the wiki page
     * @param {string} [options.otherNames] - narrow the results by the other names of the wiki page
     * @param {boolean} [options.hasOtherNames] - narrow the results by the wiki page having other names
     * @param {boolean} [options.hideDeleted] - narrow the results by the wiki page being deleted or not
     * @param {SearchWikiPagesOrder} [options.order] - the order of the results
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<WikiPage>>}
     */
    search(options?: SearchWikiPagesOptions): Promise<WikiPage[]>;
    /**
     * Create a wiki page
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} options.title - the name of the wiki page
     * @param {string} options.body - the content of the wiki page
     * @param {boolean} [options.locked] - if the wiki page should be locked (requires janitor)
     * @param {boolean} [options.forceOverwrite] - if existing pages should be overwritten (requires janitor)
     * @param {string} [options.reason] - the reson for creating the page
     * @returns {Promise<WikiPage>}
     */
    create(options: CreateWikiPageOptions): Promise<WikiPage>;
    /**
     * modify a wiki page
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the wiki page to edit
     * @param {object} options
     * @param {string} [options.name] - the name of the wiki page (requires janitor)
     * @param {string} [options.body] - the content of the wiki page
     * @param {boolean} [options.locked] - if the wiki page is locked (requires janitor)
     * @param {boolean} [options.forceOverwrite] - if existing pages should be overwritten (title change, requires janitor)
     * @param {string} [options.reason] - the reason for the edit
     * @returns {Promise<WikiPage>}
     */
    modify(id: number, options: ModifyWikiPageOptions): Promise<WikiPage>;
    /**
     * Delete a wiki page
     *
     * * Requires Authentication
     *
     * * Requires Janitor
     *
     * @param {number} id - the id of the wiki page to delete
     * @returns {Promise<null>}
     */
    delete(id: number): Promise<null>;
    /**
     * Revert a wiki page to a previous version
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the wiki page to revert
     * @param {number} versionID - the version id to revert to (see history)
     */
    revert(id: number, versionID: number): Promise<null>;
    /**
     * Get a specific wiki page history
     *
     * @param {number} id - the id of the history to get
     * @returns {Promise<WikiPageHistory | null>}
     */
    getHistory(id: number): Promise<WikiPageHistory | null>;
    /**
     * Search the wiki page history
     *
     * @param {object} [options]
     * @param {number} [options.id] - get a specific wiki page history entry
     * @param {number} [options.wikiPage] - narrow the results by the wiki page id
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<WikiPageHistory>>}
     */
    searchHistory(options?: SearchWikiPageHistoryOptions): Promise<WikiPageHistory[]>;
}
