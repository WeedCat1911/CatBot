"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const FormHelper_1 = __importDefault(require("../util/FormHelper"));
const RequestHandler_1 = require("../util/RequestHandler");
const PostFlag_1 = __importDefault(require("../structures/PostFlag"));
class PostFlags {
    auth;
    main;
    constructor(main) {
        Object.defineProperties(this, {
            auth: {
                get() {
                    return !this.main.options.authUser || !this.main.options.authKey ? null : `Basic ${Buffer.from(`${this.main.options.authUser}:${this.main.options.authKey}`).toString("base64")}`;
                },
                configurable: false,
                enumerable: false
            },
            main: {
                value: main,
                configurable: false,
                enumerable: false,
                writable: false
            }
        });
    }
    /**
     * Get a post flag by its id
     *
     * @param {number} id - The id of the post flag to get
     * @returns {Promise<(PostFlag | null)>}
     */
    async get(id) {
        const res = await this.main.request.get(`/post_flags/${id}.json`).catch(err => {
            if (err instanceof RequestHandler_1.APIError && err.statusCode === 404)
                return null;
            throw err;
        });
        return res === null ? null : new PostFlag_1.default(this.main, res);
    }
    /**
     * Search for post flags
     *
     * @param {object} [options]
     * @param {string} [options.reason] - narrow the results by the provided reason
     * @param {(string | Array<string>)} [options.tags] - narrow the results by the tags of the flagged post
     * @param {number} [options.post_id] - narrow the results by the id of the post flag
     * @param {number} [options.creator] - narrow the results by the creator name of the post flag (requires janitor if not self)
     * @param {number} [options.creator_id] - narrow the results by the creator id of the post flag (requires janitor if not self)
     * @param {number} [options.ip_addres] - narrow the results by the creator ip of the post flag (requries moderator)
     * @param {boolean} [options.resolved] - if the flag as been marked as resolved
     * @param {PostFlagCategory} [options.category] - narrow the results by the category of the post flag
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<PostFlag>>}
     */
    async search(options) {
        options = options ?? {};
        const qs = new FormHelper_1.default();
        if (typeof options.reason === "string")
            qs.add("search[reason_matches]", options.reason);
        if (typeof options.tags === "string")
            qs.add("search[post_tags_match]", options.tags);
        if (Array.isArray(options.tags) && options.tags.length > 0)
            qs.add("search[post_tags_match]", options.tags.join(" "));
        if (typeof options.post_id === "number")
            qs.add("search[post_id]", options.post_id);
        if (typeof options.creator === "string")
            qs.add("search[creator_name]", options.creator);
        if (typeof options.creator_id === "string")
            qs.add("search[creator_id]", options.creator_id);
        if (typeof options.ip_address === "string")
            qs.add("search[ip_addr]", options.ip_address);
        if (typeof options.resolved === "boolean")
            qs.add("search[is_resolved]", options.resolved);
        if (typeof options.category === "string")
            qs.add("search[creator_name]", options.category);
        if (typeof options.page !== "undefined")
            qs.add("page", options.page);
        if (typeof options.limit === "number")
            qs.add("limit", options.limit);
        const res = await this.main.request.get(`/post_flags.json?${qs.build()}`);
        return res.map(info => new PostFlag_1.default(this.main, info));
    }
    /**
     * Create a post flag
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {number} options.post_id - the id of the post to flag
     * @param {PostFlagReasons} options.reason_name - the reason for flagging the post
     * @param {number} [options.parent_id] - a post id for `previously_deleted` & `inferior`
     * @returns {Promise<PostFlag>}
     */
    async create(options) {
        this.main.request.authCheck.call(this, "PostFlag#create");
        if (!options)
            throw new Error("options is required in PostFlags#create");
        const qs = new FormHelper_1.default()
            .add("post_flag[post_id]", options.post_id)
            .add("post_flag[reason_name]", options.reason_name);
        if (typeof options.parent_id === "number")
            qs.add("post_flag[parent_id]", options.parent_id);
        const res = await this.main.request.post("/post_flags.json", qs.build());
        return new PostFlag_1.default(this.main, res);
    }
    /**
     * Unflag a post
     *
     * * Requires Authentication
     *
     * * Requires Janitor
     *
     * @param {number} post_id - the id of post to unflag
     * @returns {Promise<null>}
     */
    async delete(post_id) {
        this.main.request.authCheck.call(this, "PostFlags#delete");
        return this.main.request.delete(`/post_flags/${post_id}.json`);
    }
}
exports.default = PostFlags;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9zdEZsYWdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvUG9zdEZsYWdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBUUEsb0VBQTRDO0FBQzVDLDJEQUFrRDtBQUNsRCxzRUFBOEM7QUFFOUMsTUFBcUIsU0FBUztJQUNaLElBQUksQ0FBZ0I7SUFDcEIsSUFBSSxDQUFPO0lBQzVCLFlBQVksSUFBVTtRQUNyQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO1lBQzdCLElBQUksRUFBRTtnQkFDTCxHQUFHO29CQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQ25MLENBQUM7Z0JBQ0QsWUFBWSxFQUFFLEtBQUs7Z0JBQ25CLFVBQVUsRUFBSSxLQUFLO2FBQ25CO1lBQ0QsSUFBSSxFQUFFO2dCQUNMLEtBQUssRUFBUyxJQUFJO2dCQUNsQixZQUFZLEVBQUUsS0FBSztnQkFDbkIsVUFBVSxFQUFJLEtBQUs7Z0JBQ25CLFFBQVEsRUFBTSxLQUFLO2FBQ25CO1NBQ0QsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFVO1FBQ25CLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFxQixlQUFlLEVBQUUsT0FBTyxDQUFD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