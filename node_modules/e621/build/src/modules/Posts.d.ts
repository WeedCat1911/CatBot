import type E621 from "..";
import Post from "../structures/Post";
import PostApproval from "../structures/PostApproval";
import PostHistory from "../structures/PostHistory";
import type { CreatePostOptions, SearchPostsOptions, ModifyPostOptions, PostVoteResult, SearchPostHistoryOptions, SearchPostApprovalsOptions } from "../types";
export default class Posts {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a post by its id
     *
     * @param {(number | string)} id - The id of the post to get
     * @returns {Promise<(Post | null)>}
     */
    get(id: number | string): Promise<Post | null>;
    /**
     * Get a post by its md5
     *
     * @param {string} md5 - The md5 of the post to get
     * @returns {Promise<(Post | null)>}
     */
    getByMD5(md5: string): Promise<Post | null>;
    /**
     * Search for posts
     *
     * @param {object} [options]
     * @param {(Array<string> | string)} [options.tags] - narrow the search by specific tags
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - number for exact page, a${number} posts after ${number}, b${number} posts before ${number}
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<Post>>}
     */
    search(options?: SearchPostsOptions): Promise<Post[]>;
    /**
     * Upload a post
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {(Array<string> | string)} options.tags - the tags for the post
     * @param {Ratings} options.rating - the rating for the post
     * @param {(Array<string> | string)} options.sources - the sources for the post (required, even if empty)
     * @param {string} [options.description] - the description of the post
     * @param {number} [options.parent_id] - the parent of the post
     * @param {string} [options.referer_url] - dunno, api doc specifies it though
     * @param {string} [options.md5_confirmation] - confirm of the md5 of the uploaded file
     * @param {boolean} [options.as_pending] - upload as pending (requires approver)
     * @param {boolean} [options.rating_locked] - upload as rating locked (requires privileged)
     * @param {(Array<string> | string)} [options.locked_tags] - tags to lock on the post (requires admin)
     * @param {Buffer} [options.file] - file upload (mutually exclusive with file_url, not well tested)
     * @param {string} [options.file_url] - url of file to upload (mutually exclusive with file)
     * @returns {Promise<number>}
     */
    create(options: CreatePostOptions): Promise<number>;
    /**
     * Modify a post
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} [options.edit_reason] - the reason for the edit
     * @param {(Array<string> | string)} [options.add_tags] - the tags to add to the post
     * @param {(Array<string> | string)} [options.remove_tags] - the tags to remove from the post
     * @param {(Array<string> | string)} [options.add_sources] - the sources to add to the post
     * @param {(Array<string> | string)} [options.remove_sources] - the sources to remove from the post
     * @param {Ratings} [options.rating] - the rating for the post
     * @param {string} [options.description] - the description of the post
     * @param {number} [options.parent_id] - the parent of the post
     * @param {boolean} [options.has_embedded_notes] - I don't know what this is, api docs list it though
     * @param {boolean} [options.rating_locked] - upload as rating locked (requires privileged)
     * @param {boolean} [options.note_locked] - upload as rating locked (requires janitor)
     * @param {boolean} [options.status_locked] - upload as rating locked (requires admin)
     * @param {boolean} [options.hide_from_anonymous] - upload as rating locked (requires admin)
     * @param {boolean} [options.hide_from_search] - upload as rating locked (requires admin)
     * @param {string} [options.background_color] - the background color of the post (requires janitor)
     * @param {(Array<string> | string)} [options.locked_tags] - tags to lock on the post (requires admin)
     * @returns {Promise<Post>}
     */
    modify(id: number, options: ModifyPostOptions): Promise<Post>;
    /**
     * Revert a post to a previous version
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the post to revert
     * @param {number} version_id - the version id to revert to (see history)
     */
    revert(id: number, version_id: number): Promise<null>;
    /**
     * Get a specific post history
     *
     * @param {number} id - the id of the history to get
     * @returns {Promise<PostHistory | null>}
     */
    getHistory(id: number): Promise<PostHistory | null>;
    /**
     * Search the post history
     *
     * * Requires Authentication
     *
     * @param {object} [options]
     * @param {number} [options.id] - get a specific post history entry
     * @param {string} [options.user] - narrow the results by username
     * @param {number} [options.user_id] - narrow the results by user id
     * @param {number} [options.post] - narrow the results by post id
     * @param {string} [options.reason] - narrow the results by edit reason
     * @param {string} [options.description] - narrow the results by description content
     * @param {Ratings} [options.rating_changed_to] - narrow the results by rating change
     * @param {Ratings} [options.final_rating] - narrow the results by final rating
     * @param {number} [options.parent] - narrow the results by parent id
     * @param {number} [options.parent_changed_to] - narrow the results by changed parent id
     * @param {(Array<string> | string)} [options.final_tags] - narrow the results by final tags
     * @param {(Array<string> | string)} [options.added_tags] - narrow the results by added tags
     * @param {(Array<string> | string)} [options.removed_tags] - narrow the results by removed tags
     * @param {(Array<string> | string)} [options.final_locked_tags] - narrow the results by final locked tags
     * @param {(Array<string> | string)} [options.added_locked_tags] - narrow the results by added locked tags
     * @param {(Array<string> | string)} [options.removed_locked_tags] - narrow the results by removed locked tags
     * @param {string} [options.source] - narrow the results by sources
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<PostHistory>>}
     */
    searchHistory(options?: SearchPostHistoryOptions): Promise<PostHistory[]>;
    /**
     * Vote on a post
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the post to vote on
     * @param {boolean} up - if the vote should be up or down
     * @returns {Promise<PostVoteResult>}
     */
    vote(id: number, up: boolean): Promise<PostVoteResult>;
    /**
     * Get a specific post approval
     *
     * @param {number} id - the id of the approval to get
     * @returns {Promise<PostApproval | null>}
     */
    getPostApproval(id: number): Promise<PostApproval | null>;
    /**
     * Search the post approvals
     *
     * @param {object} [options]
     * @param {number} [options.id] - get a specific post approvals entry
     * @param {string} [options.approver] - filter by the username of the user that approved the post
     * @param {(Array<string> | string)} [options.tags] - filter by the tags on the post
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<PostApproval>>}
     */
    searchPostApprovals(options?: SearchPostApprovalsOptions): Promise<PostApproval[]>;
}
