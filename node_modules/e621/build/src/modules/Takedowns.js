"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const FormHelper_1 = __importDefault(require("../util/FormHelper"));
const RequestHandler_1 = require("../util/RequestHandler");
const Takedown_1 = __importDefault(require("../structures/Takedown"));
class Takedowns {
    auth;
    main;
    constructor(main) {
        Object.defineProperties(this, {
            auth: {
                get() {
                    return !this.main.options.authUser || !this.main.options.authKey ? null : `Basic ${Buffer.from(`${this.main.options.authUser}:${this.main.options.authKey}`).toString("base64")}`;
                },
                configurable: false,
                enumerable: false
            },
            main: {
                value: main,
                configurable: false,
                enumerable: false,
                writable: false
            }
        });
    }
    /**
     * Get a takedown by its id
     *
     * @param {number} id - The id of the note to get
     * @returns {Promise<(Takedown | null)>}
     */
    async get(id) {
        const res = await this.main.request.get(`/takedowns/${id}.json`).catch(err => {
            if (err instanceof RequestHandler_1.APIError && err.statusCode === 404)
                return null;
            throw err;
        });
        return res === null ? null : new Takedown_1.default(this.main, res);
    }
    /**
     * Search for takedowns
     *
     * @param {object} [options]
     * @param {TakedownStatus} [options.status] - narrow the results by status
     * @param {string} [options.source] - narrow the results by source (requires admin)
     * @param {string} [options.reason] - narrow the results by reason (requires admin)
     * @param {string} [options.admin_response] - narrow the results by admin response (requires admin)
     * @param {boolean} [options.reason_hidden] - narrow the results by if the reason is hidden (requires admin)
     * @param {string} [options.instructions] - narrow the results by special instructions (requires admin)
     * @param {number} [options.post_id] - narrow the results by post id (requires admin)
     * @param {string} [options.email] - narrow the results by email (requires admin)
     * @param {string} [options.ip_address] - narrow the results by ip address (requires admin)
     * @param {string} [options.vericode] - narrow the results by verification code (requires admin)
     * @param {SearchTakedownsOrder} [options.order] - the order of th returned results
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<Takedown>>}
     */
    async search(options) {
        options = options ?? {};
        const qs = new FormHelper_1.default();
        if (typeof options.status === "string")
            qs.add("search[status]", options.status);
        if (typeof options.source === "string")
            qs.add("search[source]", options.source);
        if (typeof options.reason === "string")
            qs.add("search[reason]", options.reason);
        if (typeof options.admin_response === "string")
            qs.add("search[notes]", options.admin_response);
        if (typeof options.reason_hidden === "boolean")
            qs.add("search[reason_hidden]", options.reason_hidden);
        if (typeof options.instructions === "string")
            qs.add("search[instructions]", options.instructions);
        if (typeof options.post_id === "number")
            qs.add("search[post_id]", options.post_id);
        if (typeof options.email === "string")
            qs.add("search[email]", options.email);
        if (typeof options.ip_address === "string")
            qs.add("search[ip_addr]", options.ip_address);
        if (typeof options.vericode === "string")
            qs.add("search[vericode]", options.vericode);
        if (typeof options.order === "string")
            qs.add("search[order]", options.order);
        if (typeof options.page !== "undefined")
            qs.add("page", options.page);
        if (typeof options.limit === "number")
            qs.add("limit", options.limit);
        const res = await this.main.request.get(`/takedowns.json?${qs.build()}`);
        return res.map(info => new Takedown_1.default(this.main, info));
    }
    /**
     * Create a takedown
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} options.source - the source of the takedown
     * @param {string} options.email - a valid email for the takedown
     * @param {(number | Array<number> | string | Array<string>)} [options.post_ids] - post ids or full post urls the takedown concerns (this and instructions are mutally exclusive)
     * @param {string} [options.instructions] - a set of special instructions (this and post_ids are mutally exclusive)
     * @param {string} options.reason - the reason for the takedown
     * @param {boolean} [options.reason_hidden=false] - the hide the reason of the takedown
     * @returns {Promise<Takedown>}
     */
    async create(options) {
        this.main.request.authCheck.call(this, "Takedowns#create");
        if (!options)
            throw new Error("options is required in Takedowns#create");
        if (typeof options.post_ids !== "undefined" && typeof options.instructions !== "undefined")
            process.emitWarning("only one of options.post_ids, options.instructions should be provided to Takedowns#create. options.post_ids overrides options.instructions.");
        const qs = new FormHelper_1.default()
            .add("takedown[source]", options.source)
            .add("takedown[email]", options.email)
            .add("takedown[reason]", options.reason);
        if (typeof options.reason_hidden === "boolean")
            qs.add("takedown[reason_hidden]", options.reason_hidden);
        if (typeof options.post_ids !== "undefined") {
            if (typeof options.post_ids === "number" || typeof options.post_ids === "string")
                qs.add("takedown[post_ids]", options.post_ids);
            else if (Array.isArray(options.post_ids))
                qs.add("takedown[post_ids]", options.post_ids.join(" "));
        }
        if (typeof options.instructions === "string")
            qs.add("takedown[instructions]", options.instructions);
        const res = await this.main.request.post("/takedowns.json", qs.build());
        return new Takedown_1.default(this.main, res);
    }
    /**
     * modify a takedown
     *
     * * Requires Authentication
     *
     * * Requires Admin
     *
     * @param {number} id - the id of the takedown to edit
     * @param {object} options
     * @param {boolean} [options.process_takedown] - if the takedown should be processed
     * @param {string} [options.delete_reason] - the reason to add to posts that are deleted
     * @param {Record<string | number, boolean>} [options.takedown_posts] - object of id-boolean values, false = keep, true = delete
     * @param {string | Array<string>} [options.takedown_add_posts_tags] - list of tags to match and add to the takedown
     * @param {number | Array<number>} [options.takedown_add_posts_ids] - list of posts to add to the takedown
     * @param {("pending" | "inactive")} [options.status] - mark the takedown inactive or not
     * @param {string} [options.notes] - admin notes
     * @param {boolean} [options.reason_hidden] - if the reason should be hidden
     * @returns {Promise<Takedown>}
     */
    async modify(id, options) {
        this.main.request.authCheck.call(this, "Takedowns#modify");
        if (!options)
            throw new Error("options is required in Takedowns#modify");
        const qs = new FormHelper_1.default();
        if (typeof options.process_takedown === "boolean")
            qs.add("process_takedown", options.process_takedown);
        if (typeof options.delete_reason === "string")
            qs.add("delete_reason", options.delete_reason);
        if (typeof options.takedown_posts !== "undefined") {
            Object.entries(options.takedown_posts).forEach(([post, val]) => qs.add(`takedown_posts[${post}]`, val));
        }
        if (typeof options.takedown_add_posts_tags === "string")
            qs.add("takedown-add-posts-tags", options.takedown_add_posts_tags);
        if (Array.isArray(options.takedown_add_posts_tags) && options.takedown_add_posts_tags.length > 0)
            qs.add("takedown-add-posts-tags", options.takedown_add_posts_tags.join(" "));
        if (typeof options.takedown_add_posts_ids === "string")
            qs.add("takedown-add-posts-ids", options.takedown_add_posts_ids);
        if (Array.isArray(options.takedown_add_posts_ids) && options.takedown_add_posts_ids.length > 0)
            qs.add("takedown-add-posts-ids", options.takedown_add_posts_ids.join(" "));
        if (typeof options.status === "string")
            qs.add("takedown[status]", options.status);
        if (typeof options.notes === "string")
            qs.add("takedown[notes]", options.notes);
        if (typeof options.reason_hidden === "string")
            qs.add("takedown[reason_hidden]", options.reason_hidden);
        const res = await this.main.request.put(`/notes/${id}.json`, qs.build());
        return new Takedown_1.default(this.main, res);
    }
    /**
     * Delete a takedown
     *
     * * Requires Authentication
     *
     * * Requires Admin
     *
     * @param {number} id - the id of the takedownto delete
     * @returns {Promise<null>}
     */
    async delete(id) {
        this.main.request.authCheck.call(this, "Takedowns#delete");
        return this.main.request.delete(`/takedowns/${id}.json`);
    }
}
exports.default = Takedowns;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFrZWRvd25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvVGFrZWRvd25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBU0Esb0VBQTRDO0FBQzVDLDJEQUFrRDtBQUNsRCxzRUFBOEM7QUFFOUMsTUFBcUIsU0FBUztJQUNaLElBQUksQ0FBZ0I7SUFDcEIsSUFBSSxDQUFPO0lBQzVCLFlBQVksSUFBVTtRQUNyQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO1lBQzdCLElBQUksRUFBRTtnQkFDTCxHQUFHO29CQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQ25MLENBQUM7Z0JBQ0QsWUFBWSxFQUFFLEtBQUs7Z0JBQ25CLFVBQVUsRUFBSSxLQUFLO2FBQ25CO1lBQ0QsSUFBSSxFQUFFO2dCQUNMLEtBQUssRUFBUyxJQUFJO2dCQUNsQixZQUFZLEVBQUUsS0FBSztnQkFDbkIsVUFBVSxFQUFJLEtBQUs7Z0JBQ25CLFFBQVEsRUFBTSxLQUFLO2FBQ25CO1NBQ0QsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFVO1FBQ25CLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFxQixjQUFjLEVBQUUsT0FBTyxDQUFD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