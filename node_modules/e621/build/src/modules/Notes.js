"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const FormHelper_1 = __importDefault(require("../util/FormHelper"));
const RequestHandler_1 = require("../util/RequestHandler");
const Note_1 = __importDefault(require("../structures/Note"));
const NoteHistory_1 = __importDefault(require("../structures/NoteHistory"));
class Notes {
    auth;
    main;
    constructor(main) {
        Object.defineProperties(this, {
            auth: {
                get() {
                    return !this.main.options.authUser || !this.main.options.authKey ? null : `Basic ${Buffer.from(`${this.main.options.authUser}:${this.main.options.authKey}`).toString("base64")}`;
                },
                configurable: false,
                enumerable: false
            },
            main: {
                value: main,
                configurable: false,
                enumerable: false,
                writable: false
            }
        });
    }
    /**
     * Get a note by its id
     *
     * @param {number} id - The id of the note to get
     * @returns {Promise<(Note | null)>}
     */
    async get(id) {
        const res = await this.main.request.get(`/notes/${id}.json`).catch(err => {
            if (err instanceof RequestHandler_1.APIError && err.statusCode === 404)
                return null;
            throw err;
        });
        return res === null ? null : new Note_1.default(this.main, res);
    }
    /**
     * Search for notes
     *
     * @param {object} [options]
     * @param {string} [options.body] - narrow the results by the body of the note
     * @param {string} [options.author] - narrow the results by the (name of the) creator of the note
     * @param {(string | Array<string>)} [options.tags] - narrow the results by the tags of the post the note is on
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<Note>>}
     */
    async search(options) {
        options = options ?? {};
        const qs = new FormHelper_1.default();
        if (typeof options.body === "string")
            qs.add("search[body_matches]", options.body);
        if (typeof options.author === "string")
            qs.add("search[creator_name]", options.author);
        if (typeof options.tags === "string")
            qs.add("search[post_tags_match]", options.tags);
        if (Array.isArray(options.tags) && options.tags.length > 0)
            qs.add("search[post_tags_match]", options.tags.join(" "));
        if (typeof options.page !== "undefined")
            qs.add("page", options.page);
        if (typeof options.limit === "number")
            qs.add("limit", options.limit);
        const res = await this.main.request.get(`/notes.json?${qs.build()}`);
        return res.map(info => new Note_1.default(this.main, info));
    }
    /**
     * Create a note
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {number} options.post_id - the id of the post to make the note on
     * @param {number} options.x - the x location of the note
     * @param {number} options.y - the y location of the note
     * @param {number} options.width - the width of the note
     * @param {number} options.height - the height of the note
     * @param {string} options.body - the body of the note
     * @returns {Promise<Note>}
     */
    async create(options) {
        this.main.request.authCheck.call(this, "Notes#create");
        if (!options)
            throw new Error("options is required in Notes#create");
        const qs = new FormHelper_1.default()
            .add("note[post_id]", options.post_id)
            .add("note[x]", options.x)
            .add("note[y]", options.y)
            .add("note[width]", options.width)
            .add("note[height]", options.height)
            .add("note[body]", options.body);
        const res = await this.main.request.post("/notes.json", qs.build());
        if (res && !Array.isArray(res) && "notes" in res)
            return [];
        return new Note_1.default(this.main, res);
    }
    /**
     * modify a note
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the note to edit
     * @param {object} options
     * @param {number} [options.x] - the x location of the note
     * @param {number} [options.y] - the y location of the note
     * @param {number} [options.width] - the width of the note
     * @param {number} [options.height] - the height of the note
     * @param {string} [options.body] - the body of the note
     * @returns {Promise<Note>}
     */
    async modify(id, options) {
        this.main.request.authCheck.call(this, "Notes#modify");
        if (!options)
            throw new Error("options is required in Notes#modify");
        const qs = new FormHelper_1.default();
        if (typeof options.x === "number")
            qs.add("note[x]", options.x);
        if (typeof options.y === "number")
            qs.add("note[y]", options.y);
        if (typeof options.width === "number")
            qs.add("note[width]", options.width);
        if (typeof options.height === "number")
            qs.add("note[height]", options.height);
        if (typeof options.body === "string")
            qs.add("note[body]", options.body);
        const res = await this.main.request.put(`/notes/${id}.json`, qs.build());
        return new Note_1.default(this.main, res);
    }
    /**
     * Delete a note
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the note to delete
     * @returns {Promise<null>}
     */
    async delete(id) {
        this.main.request.authCheck.call(this, "Notes#delete");
        return this.main.request.delete(`/notes/${id}.json`);
    }
    /**
     * Get a specific notes history
     *
     * @param {number} id - the id of the history to get
     * @returns {Promise<NoteHistory | null>}
     */
    async getHistory(id) { return this.searchHistory({ id }).then(r => r.length === 0 ? null : r[0]); }
    /**
     * Search the notes history
     *
     * @param {object} [options]
     * @param {number} [options.id] - get a specific notes history entry
     * @param {number} [options.note_id] - narrow the results by the note id
     * @param {number} [options.post_id] - narrow the results by the id of the post the note is on
     * @param {string} [options.body] - narrow the results by the content
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<NoteHistory>>}
     */
    async searchHistory(options) {
        options = options ?? {};
        const qs = new FormHelper_1.default();
        if (typeof options.id === "number")
            qs.add("search[id]", options.id);
        if (typeof options.note_id === "number")
            qs.add("search[note_id]", options.note_id);
        if (typeof options.post_id === "number")
            qs.add("search[post_id]", options.post_id);
        if (typeof options.body === "string")
            qs.add("search[body_matches]", options.body);
        if (typeof options.page !== "undefined")
            qs.add("page", options.page);
        if (typeof options.limit === "number")
            qs.add("limit", options.limit);
        const res = await this.main.request.get(`/note_versions.json?${qs.build()}`);
        if (res && !Array.isArray(res) && "note_versions" in res)
            return [];
        return res.map(info => new NoteHistory_1.default(this.main, info));
    }
}
exports.default = Notes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kdWxlcy9Ob3Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQVNBLG9FQUE0QztBQUM1QywyREFBa0Q7QUFDbEQsOERBQXNDO0FBQ3RDLDRFQUFvRDtBQUVwRCxNQUFxQixLQUFLO0lBQ1IsSUFBSSxDQUFnQjtJQUNwQixJQUFJLENBQU87SUFDNUIsWUFBWSxJQUFVO1FBQ3JCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUU7WUFDN0IsSUFBSSxFQUFFO2dCQUNMLEdBQUc7b0JBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztnQkFDbkwsQ0FBQztnQkFDRCxZQUFZLEVBQUUsS0FBSztnQkFDbkIsVUFBVSxFQUFJLEtBQUs7YUFDbkI7WUFDRCxJQUFJLEVBQUU7Z0JBQ0wsS0FBSyxFQUFTLElBQUk7Z0JBQ2xCLFlBQVksRUFBRSxLQUFLO2dCQUNuQixVQUFVLEVBQUksS0FBSztnQkFDbkIsUUFBUSxFQUFNLEtBQUs7YUFDbkI7U0FDRCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQVU7UUFDbkIsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQWlCLFVBQVUsRUFBRSxPQUFP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