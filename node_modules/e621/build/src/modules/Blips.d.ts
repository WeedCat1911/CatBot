import type E621 from "..";
import type { SearchBlipsOptions, CreateBlipOptions, ModifyBlipOptions, BlipWarningType } from "../types";
import Blip from "../structures/Blip";
export default class Blips {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    /**
     * Get a blip by its id
     *
     * @param {number} id - The id of the blip to get
     * @returns {Promise<(Blip | null)>}
     */
    get(id: number): Promise<Blip | null>;
    /**
     * Search for blips
     *
     * @param {object} [options]
     * @param {string} [options.creator] - narrow the results by creator name
     * @param {number} [options.creator_id] - narrow the results by creator id
     * @param {string} [options.body] - narrow the results by body content
     * @param {number} [options.response_to] - narrow the results by parent id
     * @param {string} [options.ip_address] - narrow the results by ip address (requires moderator)
     * @param {SearchBlipsOrder} [options.order] - the order of the results
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @returns {Promise<Array<Blip>>}
     */
    search(options?: SearchBlipsOptions): Promise<Blip[]>;
    /**
     * Create a blip
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} options.body - the body content of the blip
     * @param {number} [options.response_to] - the blip to respond to
     * @returns {Promise<Blip>}
     */
    create(options: CreateBlipOptions): Promise<Blip>;
    /**
     * modify a blip
     *
     * * Requires Authentication
     *
     * * Requires Moderator if not created by self
     *
     * * blips older than 5 minutes cannot be edited (does not apply if moderator)
     *
     * @param {number} id - the id of the blip to edit
     * @param {object} options
     * @param {string} options.body - the body content of the blip
     * @returns {Promise<Blip>}
     */
    modify(id: number, options: ModifyBlipOptions): Promise<Blip>;
    /**
     * Delete a blip
     *
     * * Requires Authentication
     *
     * * Requires Moderator
     *
     * @param {number} post_id - the id of blip to delete
     * @returns {Promise<null>}
     */
    delete(id: number): Promise<null>;
    /**
     * Add a warning to a blip
     *
     * * Requires Authentication
     *
     * * Requires Moderator
     *
     * @param {number} id - the id of the blip to add the warning to
     * @param {BlipWarningType} type - the type of warning to
     * @returns {Promise<Blip>}
     */
    addWarning(id: number, type: BlipWarningType): Promise<Blip>;
}
