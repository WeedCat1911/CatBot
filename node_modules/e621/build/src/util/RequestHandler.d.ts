/// <reference types="node" />
import type FormHelper from "./FormHelper";
import type E621 from "..";
export declare class APIError extends Error {
    name: string;
    type: "UNEXPECTED" | "PARSE" | "UNKNOWN" | "BLIP_OLD";
    statusCode: number;
    statusMessage: string;
    method: string;
    path: string;
    reqBody: string | null;
    reqBodyDecoded: Record<string, unknown> | null;
    resBody: unknown | null;
    constructor(type: APIError["type"], statusCode: number, statusMessage: string, method: string, path: string, reqBody: string | null, resBody: unknown | null);
}
export default class RequestHandler {
    private readonly auth;
    private readonly main;
    constructor(main: E621);
    authCheck(func: string, error?: boolean): boolean;
    get<T = unknown>(path: string): Promise<T | null>;
    post<T = unknown>(path: string, body?: string): Promise<T | null>;
    postWithFile<T = unknown>(path: string, body: FormHelper, files: Array<{
        content: Buffer;
        name: string;
    }>): Promise<T | null>;
    patch<T = unknown>(path: string, body?: string): Promise<T | null>;
    put<T = unknown>(path: string, body?: string): Promise<T | null>;
    delete<T = unknown>(path: string, body?: string): Promise<T | null>;
    other<T = unknown>(method: string, path: string, body?: string): Promise<T | null>;
    otherWithFile<T = unknown>(method: string, path: string, body: FormHelper, files: Array<{
        content: Buffer;
        name: string;
    }>): Promise<T | null>;
    get instanceURL(): string;
    get deletedImageURL(): string;
    constructURL(md5: string, type: "original" | "preview" | "sample", ext?: string): string;
}
