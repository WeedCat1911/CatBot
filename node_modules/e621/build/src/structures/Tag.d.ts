import type Post from "./Post";
import type TagHistory from "./TagHistory";
import type { TagProperties, SearchPostsOptions, ModifyTagOptions, SearchTagHistoryOptions } from "../types";
import type E621 from "..";
export default class Tag implements TagProperties {
    private main;
    id: number;
    name: string;
    created_at: string;
    updated_at: string;
    creator_id: number;
    post_count: number;
    category: number;
    related_tags: string | null;
    related_tags_updated_at: string | null;
    is_locked: boolean;
    constructor(main: E621, info: TagProperties);
    /**
     * Get posts with this tag (and others, if specified)
     *
     * @param {object} [options]
     * @param {(Array<string> | string)} [options.tags] - narrow the search by specific tags
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - number for exact page, a${number} posts after ${number}, b${number} posts before ${number}
     * @param {number} [options.limit] - limit the maximum amount of results returned
     *
     * @returns {Promise<Array<Post>>}
     */
    getPosts(options?: SearchPostsOptions): Promise<Post[]>;
    /**
     * Fetch all posts with this tag (and extras, if specified)
     *
     * @param {Array<string>} [extraTags] - the additional tags for searching
     * @param {number} [lastID] - internal use only
     * @param {Array<Post>} [lastPosts] - internal use only
     * @returns
     */
    getAllPosts(extraTags?: Array<string>, lastID?: number, lastPosts?: Array<Post>): Promise<Array<Post>>;
    /**
     * modify this tag
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {number} [options.category] - the category of the tag
     * @param {string} [options.locked] - if the tag is locked (requires moderator)
     * @returns {Promise<Tag>}
     */
    modify(options: ModifyTagOptions): Promise<Tag>;
    /**
     * Search this tag's history
     *
     * @param {object} [options]
     * @param {number} [options.user] - page of results to get
     * @param {number} [options.user_id] - page of results to get
     * @param {number} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<TagHistory>>}
     */
    getHistory(options?: Omit<SearchTagHistoryOptions, "tag" | "id">): Promise<TagHistory[]>;
}
