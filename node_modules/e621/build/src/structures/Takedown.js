"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Takedown {
    main;
    id;
    status;
    approver_id;
    reason_hidden;
    created_at;
    updated_at;
    post_count;
    constructor(main, info) {
        Object.assign(this, info);
        Object.defineProperty(this, "main", {
            value: main,
            configurable: false,
            enumerable: false,
            writable: false
        });
    }
    /**
     * Get the approver of this takedown
     *
     * @returns {Promise<User | null>}
     */
    async getApprover() { return this.approver_id === null ? null : this.main.users.get.call(this.main.users, this.approver_id); }
    /**
     * modify this takedown
     *
     * * Requires Authentication
     *
     * * Requires Admin
     *
     * @param {object} options
     * @param {boolean} [options.process_takedown] - if the takedown should be processed
     * @param {string} [options.delete_reason] - the reason to add to posts that are deleted
     * @param {Record<string | number, boolean>} [options.takedown_posts] - object of id-boolean values, false = keep, true = delete
     * @param {string | Array<string>} [options.takedown_add_posts_tags] - list of tags to match and add to the takedown
     * @param {number | Array<number>} [options.takedown_add_posts_ids] - list of posts to add to the takedown
     * @param {("pending" | "inactive")} [options.status] - mark the takedown inactive or not
     * @param {string} [options.notes] - admin notes
     * @param {boolean} [options.reason_hidden] - if the reason should be hidden
     * @returns {Promise<Takedown>}
     */
    async modify(options) {
        this.main.request.authCheck.call(this, "Takedown#modify");
        return this.main.takedowns.modify.call(this.main.takedowns, this.id, options);
    }
    /**
     * Delete this takedown
     *
     * * Requires Authentication
     *
     * * Requires Admin
     *
     * @returns {Promise<null>}
     */
    async delete() {
        this.main.request.authCheck.call(this, "Takedown#delete");
        return this.main.takedowns.delete.call(this.main.takedowns, this.id);
    }
}
exports.default = Takedown;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFrZWRvd24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0dXJlcy9UYWtlZG93bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLE1BQXFCLFFBQVE7SUFDcEIsSUFBSSxDQUFPO0lBQ25CLEVBQUUsQ0FBUztJQUNYLE1BQU0sQ0FBaUI7SUFDdkIsV0FBVyxDQUFnQjtJQUMzQixhQUFhLENBQVU7SUFDdkIsVUFBVSxDQUFTO0lBQ25CLFVBQVUsQ0FBUztJQUNuQixVQUFVLENBQVM7SUFDbkIsWUFBWSxJQUFVLEVBQUUsSUFBd0I7UUFDL0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO1lBQ25DLEtBQUssRUFBUyxJQUFJO1lBQ2xCLFlBQVksRUFBRSxLQUFLO1lBQ25CLFVBQVUsRUFBSSxLQUFLO1lBQ25CLFFBQVEsRUFBTSxLQUFLO1NBQ25CLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFdBQVcsS0FBSyxPQUFPLElBQUksQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUvSDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkc7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQThCO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDMUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsS0FBSyxDQUFDLE1BQU07UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzFELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEUsQ0FBQztDQUNEO0FBOURELDJCQThEQyJ9