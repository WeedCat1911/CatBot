"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Post {
    main;
    id;
    created_at;
    updated_at;
    file;
    preview;
    sample;
    score;
    tags;
    locked_tags;
    change_seq;
    flags;
    rating;
    fav_count;
    sources;
    pools;
    relationships;
    approver_id;
    uploader_id;
    description;
    comment_count;
    is_favorited;
    has_notes;
    duration;
    constructor(main, info) {
        Object.assign(this, info);
        Object.defineProperty(this, "main", {
            value: main,
            configurable: false,
            enumerable: false,
            writable: false
        });
        // blacklisted or deleted
        if (this.file.url === null)
            this.file.url = this.flags.deleted ? this.main.request.deletedImageURL : this.main.request.constructURL(this.file.md5, "original", this.file.ext);
        if (this.preview.url === null)
            this.preview.url = this.flags.deleted ? this.main.request.deletedImageURL : this.main.request.constructURL(this.file.md5, "preview", this.file.ext);
        if (this.sample.has && this.sample.url === null)
            this.sample.url = this.flags.deleted ? this.main.request.deletedImageURL : this.main.request.constructURL(this.file.md5, "sample", this.file.ext);
    }
    /**
     * Get the user object for creator of this post
     *
     * @returns {Promise<User | null>}
     */
    async getUploader() { return this.main.users.get.call(this.main.users, this.uploader_id); }
    /**
     * Get the user object for approver of this post (will be null if self approved)
     *
     * @returns {Promise<User | null>}
     */
    async getApprover() { return this.approver_id === null ? null : this.main.users.get.call(this.main.users, this.approver_id); }
    /**
     * Add this post to a set
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the set to add this post to
     * @returns {Promise<PostSet>}
     */
    async addToSet(id) {
        this.main.request.authCheck("Post#addToSet");
        return this.main.postSets.addPost.call(this.main.postSets, id, this.id);
    }
    /**
     * Remove this post from a set
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the set to remove this post from
     * @returns {Promise<PostSet>}
     */
    async removeFromSet(id) {
        this.main.request.authCheck("Post#removeFromSet");
        return this.main.postSets.removePost.call(this.main.postSets, id, this.id);
    }
    /**
     * Add this post to a pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to add this post to
     * @returns {Promise<Pool>}
     */
    async addToPool(id) {
        this.main.request.authCheck("Post#addToPool");
        return this.main.pools.addPost.call(this.main.postSets, id, this.id);
    }
    /**
     * Remove this post from a pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to remove this post from
     * @returns {Promise<Pool>}
     */
    async removeFromPool(id) {
        this.main.request.authCheck("Post#removeFromPool");
        return this.main.pools.removePost.call(this.main.pools, id, this.id);
    }
    /**
     * Modify a post
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} [options.edit_reason] - the reason for the edit
     * @param {(Array<string> | string)} [options.add_tags] - the tags to add to the post
     * @param {(Array<string> | string)} [options.remove_tags] - the tags to remove from the post
     * @param {(Array<string> | string)} [options.add_sources] - the sources to add to the post
     * @param {(Array<string> | string)} [options.remove_sources] - the sources to remove from the post
     * @param {Ratings} [options.rating] - the rating for the post
     * @param {string} [options.description] - the description of the post
     * @param {number} [options.parent_id] - the parent of the post
     * @param {boolean} [options.has_embedded_notes] - I don't know what this is, api docs list it though
     * @param {boolean} [options.rating_locked] - upload as rating locked (requires privileged)
     * @param {boolean} [options.note_locked] - upload as rating locked (requires janitor)
     * @param {boolean} [options.status_locked] - upload as rating locked (requires admin)
     * @param {boolean} [options.hide_from_anonymous] - upload as rating locked (requires admin)
     * @param {boolean} [options.hide_from_search] - upload as rating locked (requires admin)
     * @param {string} [options.background_color] - the background color of the post (requires janitor)
     * @param {(Array<string> | string)} [options.lockedTags] - tags to lock on the post (requires admin)
     * @returns {Promise<Post>}
     */
    async modify(options) {
        this.main.request.authCheck("Post#modify");
        if (!options)
            throw new Error("options is required in Post#modify");
        return this.main.posts.modify.call(this.main.posts, this.id, options);
    }
    /**
     * Vote on this post
     *
     * * Requires Authentication
     *
     * @param {boolean} up - if the vote should be up or down
     * @returns {Promise<PostVoteResult>}
     */
    async vote(up) {
        this.main.request.authCheck("Post#vote");
        return this.main.posts.vote.call(this.main.posts, this.id, up);
    }
    /**
     * Favorite this post
     *
     * * Requires Authentication
     *
     * @returns {Promise<Post>}
     */
    async favorite() {
        this.main.request.authCheck("Post#favorite");
        return this.main.users.addFavorite.call(this.main.users, this.id);
    }
    /**
     * Unfavorite this post
     *
     * * Requires Authentication
     *
     * @returns {Promise<Post>}
     */
    async unfavorite() {
        this.main.request.authCheck("Post#unfavorite");
        return this.main.users.removeFavorite.call(this.main.users, this.id);
    }
}
exports.default = Post;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9zdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3R1cmVzL1Bvc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFNQSxNQUFxQixJQUFJO0lBQ2hCLElBQUksQ0FBTztJQUNuQixFQUFFLENBQVM7SUFDWCxVQUFVLENBQVM7SUFDbkIsVUFBVSxDQUFTO0lBQ25CLElBQUksQ0FPRjtJQUNGLE9BQU8sQ0FJTDtJQUNGLE1BQU0sQ0FZSjtJQUNGLEtBQUssQ0FBMEM7SUFDL0MsSUFBSSxDQUFvSDtJQUN4SCxXQUFXLENBQWdCO0lBQzNCLFVBQVUsQ0FBUztJQUNuQixLQUFLLENBQXlHO0lBQzlHLE1BQU0sQ0FBVTtJQUNoQixTQUFTLENBQVM7SUFDbEIsT0FBTyxDQUFnQjtJQUN2QixLQUFLLENBQWdCO0lBQ3JCLGFBQWEsQ0FLWDtJQUNGLFdBQVcsQ0FBZ0I7SUFDM0IsV0FBVyxDQUFTO0lBQ3BCLFdBQVcsQ0FBUztJQUNwQixhQUFhLENBQVM7SUFDdEIsWUFBWSxDQUFVO0lBQ3RCLFNBQVMsQ0FBVTtJQUNuQixRQUFRLENBQWdCO0lBQ3hCLFlBQVksSUFBVSxFQUFFLElBQW9CO1FBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRTtZQUNuQyxLQUFLLEVBQVMsSUFBSTtZQUNsQixZQUFZLEVBQUUsS0FBSztZQUNuQixVQUFVLEVBQUksS0FBSztZQUNuQixRQUFRLEVBQU0sS0FBSztTQUNuQixDQUFDLENBQUM7UUFFSCx5QkFBeUI7UUFDekIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxJQUFJO1lBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlLLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssSUFBSTtZQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuTCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLElBQUk7WUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcE0sQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsV0FBVyxLQUFLLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTNGOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsV0FBVyxLQUFLLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTlIOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQVU7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFVO1FBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2xELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFVO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFVO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0F1Qkc7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQTBCO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUNwRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBVztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyxRQUFRO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyxVQUFVO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDL0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN0RSxDQUFDO0NBQ0Q7QUF4TUQsdUJBd01DIn0=