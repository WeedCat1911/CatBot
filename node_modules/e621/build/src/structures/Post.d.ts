import type PostSet from "./PostSet";
import type User from "./User";
import Pool from "./Pool";
import type { PostProperties, Ratings, ModifyPostOptions, PostVoteResult } from "../types";
import type E621 from "..";
export default class Post implements PostProperties {
    private main;
    id: number;
    created_at: string;
    updated_at: string;
    file: {
        width: number;
        height: number;
        ext: string;
        size: number;
        md5: string;
        url: string;
    };
    preview: {
        width: number;
        height: number;
        url: string;
    };
    sample: {
        has: boolean;
        height: number;
        width: number;
        url: string;
        alternates: Record<string, {
            type: string;
            height: number;
            width: number;
            urls: Array<string | null>;
        }>;
    };
    score: Record<"up" | "down" | "total", number>;
    tags: Record<"general" | "species" | "character" | "copyright" | "artist" | "invalid" | "lore" | "meta", Array<string>>;
    locked_tags: Array<string>;
    change_seq: number;
    flags: Record<"pending" | "flagged" | "note_locked" | "status_locked" | "rating_locked" | "deleted", boolean>;
    rating: Ratings;
    fav_count: number;
    sources: Array<string>;
    pools: Array<number>;
    relationships: {
        parent_id: number | null;
        has_children: boolean;
        has_active_children: boolean;
        children: Array<number>;
    };
    approver_id: number | null;
    uploader_id: number;
    description: string;
    comment_count: number;
    is_favorited: boolean;
    has_notes: boolean;
    duration: number | null;
    constructor(main: E621, info: PostProperties);
    /**
     * Get the user object for creator of this post
     *
     * @returns {Promise<User | null>}
     */
    getUploader(): Promise<User | null>;
    /**
     * Get the user object for approver of this post (will be null if self approved)
     *
     * @returns {Promise<User | null>}
     */
    getApprover(): Promise<User | null>;
    /**
     * Add this post to a set
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the set to add this post to
     * @returns {Promise<PostSet>}
     */
    addToSet(id: number): Promise<PostSet>;
    /**
     * Remove this post from a set
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the set to remove this post from
     * @returns {Promise<PostSet>}
     */
    removeFromSet(id: number): Promise<PostSet>;
    /**
     * Add this post to a pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to add this post to
     * @returns {Promise<Pool>}
     */
    addToPool(id: number): Promise<Pool>;
    /**
     * Remove this post from a pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the pool to remove this post from
     * @returns {Promise<Pool>}
     */
    removeFromPool(id: number): Promise<Pool>;
    /**
     * Modify a post
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} [options.edit_reason] - the reason for the edit
     * @param {(Array<string> | string)} [options.add_tags] - the tags to add to the post
     * @param {(Array<string> | string)} [options.remove_tags] - the tags to remove from the post
     * @param {(Array<string> | string)} [options.add_sources] - the sources to add to the post
     * @param {(Array<string> | string)} [options.remove_sources] - the sources to remove from the post
     * @param {Ratings} [options.rating] - the rating for the post
     * @param {string} [options.description] - the description of the post
     * @param {number} [options.parent_id] - the parent of the post
     * @param {boolean} [options.has_embedded_notes] - I don't know what this is, api docs list it though
     * @param {boolean} [options.rating_locked] - upload as rating locked (requires privileged)
     * @param {boolean} [options.note_locked] - upload as rating locked (requires janitor)
     * @param {boolean} [options.status_locked] - upload as rating locked (requires admin)
     * @param {boolean} [options.hide_from_anonymous] - upload as rating locked (requires admin)
     * @param {boolean} [options.hide_from_search] - upload as rating locked (requires admin)
     * @param {string} [options.background_color] - the background color of the post (requires janitor)
     * @param {(Array<string> | string)} [options.lockedTags] - tags to lock on the post (requires admin)
     * @returns {Promise<Post>}
     */
    modify(options: ModifyPostOptions): Promise<Post>;
    /**
     * Vote on this post
     *
     * * Requires Authentication
     *
     * @param {boolean} up - if the vote should be up or down
     * @returns {Promise<PostVoteResult>}
     */
    vote(up: boolean): Promise<PostVoteResult>;
    /**
     * Favorite this post
     *
     * * Requires Authentication
     *
     * @returns {Promise<Post>}
     */
    favorite(): Promise<Post>;
    /**
     * Unfavorite this post
     *
     * * Requires Authentication
     *
     * @returns {Promise<Post>}
     */
    unfavorite(): Promise<null>;
}
