"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Pool {
    main;
    id;
    name;
    created_at;
    updated_at;
    creator_id;
    creator_name;
    is_active;
    is_deleted;
    category;
    post_ids;
    post_count;
    constructor(main, info) {
        Object.assign(this, info);
        Object.defineProperty(this, "main", {
            value: main,
            configurable: false,
            enumerable: false,
            writable: false
        });
    }
    /**
     * Get the post objects for the posts in this set
     *
     * @returns {Promise<Array<Post>>}
     */
    async getPosts() { return this.main.posts.search.call(this.main.posts, { tags: `pool:${this.id}` }); }
    /**
     * Add a post to this pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the post to add
     * @returns {Promise<Pool>}
     */
    async addPost(id) {
        this.main.request.authCheck("Pool#addPost");
        return this.main.postSets.addPost.call(this.main.pools, this.id, id);
    }
    /**
     * Remove a post from this pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the post to remove
     * @returns {Promise<Pool>}
     */
    async removePost(id) {
        this.main.request.authCheck("Pool#removePost");
        return this.main.postSets.removePost.call(this.main.pools, this.id, id);
    }
    /**
     * modify this pool
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} [options.name] - the name of the pool
     * @param {string} [options.description] - the description of the pool
     * @param {Array<number>} [options.posts] - the posts to include in the pool (this will override all currently included posts)
     * @param {boolean} [options.category] - the category of the pool
     * @param {boolean} [options.active] - if the pool is active
     * @returns {Promise<Pool>}
     */
    async modify(options) {
        this.main.request.authCheck("Pool#modify");
        if (!options)
            throw new Error("options is required in Pool#modify");
        return this.main.pools.modify.call(this.main.pools, this.id, options);
    }
    /**
     * Delete this pool
     *
     * * Requires Authentication
     *
     * * Requires Janitor
     *
     * @returns {Promise<null>}
     */
    async delete() {
        this.main.request.authCheck("Pool#delete");
        return this.main.pools.delete.call(this.main.pools, this.id);
    }
    /**
     * Revert this pool to a previous version
     *
     * * Requires Authentication
     *
     * @param {number} versionID - the version id to revert to (see history)
     */
    async revert(versionID) {
        this.main.request.authCheck("Pool#revert");
        return this.main.pools.revert.call(this.main.pools, this.id, versionID);
    }
    /**
     * Search this pool's history
     *
     * @param {object} [options]
     * @param {number} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<PoolHistory>>}
     */
    async getHistory(options) {
        return this.main.pools.searchHistory.call(this.main.pools, { pool: this.id, ...options });
    }
}
exports.default = Pool;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9vbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3R1cmVzL1Bvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQSxNQUFxQixJQUFJO0lBQ2hCLElBQUksQ0FBTztJQUNuQixFQUFFLENBQVM7SUFDWCxJQUFJLENBQVM7SUFDYixVQUFVLENBQVM7SUFDbkIsVUFBVSxDQUFTO0lBQ25CLFVBQVUsQ0FBUztJQUNuQixZQUFZLENBQVM7SUFDckIsU0FBUyxDQUFVO0lBQ25CLFVBQVUsQ0FBVTtJQUNwQixRQUFRLENBQWU7SUFDdkIsUUFBUSxDQUFnQjtJQUN4QixVQUFVLENBQVM7SUFDbkIsWUFBWSxJQUFVLEVBQUUsSUFBb0I7UUFDM0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO1lBQ25DLEtBQUssRUFBUyxJQUFJO1lBQ2xCLFlBQVksRUFBRSxLQUFLO1lBQ25CLFVBQVUsRUFBSSxLQUFLO1lBQ25CLFFBQVEsRUFBTSxLQUFLO1NBQ25CLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFFBQVEsS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0Rzs7Ozs7OztPQU9HO0lBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFVO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBVTtRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMvQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7OztPQVlHO0lBQ0gsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUEwQjtRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLE9BQU87WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFDcEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsS0FBSyxDQUFDLE1BQU07UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFpQjtRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFnRDtRQUNoRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDM0YsQ0FBQztDQUNEO0FBakhELHVCQWlIQyJ9