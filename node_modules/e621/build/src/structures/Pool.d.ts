import type Post from "./Post";
import type PoolHistory from "./PoolHistory";
import type { PoolProperties, PoolCategory, ModifyPoolOptions, SearchPoolHistoryOptions } from "../types";
import type E621 from "..";
export default class Pool implements PoolProperties {
    private main;
    id: number;
    name: string;
    created_at: string;
    updated_at: string;
    creator_id: number;
    creator_name: string;
    is_active: boolean;
    is_deleted: boolean;
    category: PoolCategory;
    post_ids: Array<number>;
    post_count: number;
    constructor(main: E621, info: PoolProperties);
    /**
     * Get the post objects for the posts in this set
     *
     * @returns {Promise<Array<Post>>}
     */
    getPosts(): Promise<Post[]>;
    /**
     * Add a post to this pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the post to add
     * @returns {Promise<Pool>}
     */
    addPost(id: number): Promise<import("./PostSet").default>;
    /**
     * Remove a post from this pool
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the post to remove
     * @returns {Promise<Pool>}
     */
    removePost(id: number): Promise<import("./PostSet").default>;
    /**
     * modify this pool
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} [options.name] - the name of the pool
     * @param {string} [options.description] - the description of the pool
     * @param {Array<number>} [options.posts] - the posts to include in the pool (this will override all currently included posts)
     * @param {boolean} [options.category] - the category of the pool
     * @param {boolean} [options.active] - if the pool is active
     * @returns {Promise<Pool>}
     */
    modify(options: ModifyPoolOptions): Promise<Pool>;
    /**
     * Delete this pool
     *
     * * Requires Authentication
     *
     * * Requires Janitor
     *
     * @returns {Promise<null>}
     */
    delete(): Promise<null>;
    /**
     * Revert this pool to a previous version
     *
     * * Requires Authentication
     *
     * @param {number} versionID - the version id to revert to (see history)
     */
    revert(versionID: number): Promise<null>;
    /**
     * Search this pool's history
     *
     * @param {object} [options]
     * @param {number} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<PoolHistory>>}
     */
    getHistory(options?: Omit<SearchPoolHistoryOptions, "pool">): Promise<PoolHistory[]>;
}
