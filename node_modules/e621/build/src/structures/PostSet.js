"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class PostSet {
    main;
    id;
    name;
    shortname;
    description;
    is_public;
    transfer_on_delete;
    creator_id;
    post_ids;
    post_count;
    created_at;
    updated_at;
    constructor(main, info) {
        Object.assign(this, info);
        Object.defineProperty(this, "main", {
            value: main,
            configurable: false,
            enumerable: false,
            writable: false
        });
    }
    /**
     * Get the post objects for the posts in this set
     *
     * @returns {Promise<Array<Post>>}
     */
    async getPosts() { return this.main.posts.search.call(this.main.posts, { tags: this.post_ids.map(p => `id:${p}`) }); }
    /**
     * Get the user object of the creator of this set
     *
     * @returns {Promise<User | null>}
     */
    async getCreator() { return this.main.users.get.call(this.main.users, this.creator_id); }
    /**
     * Add a post to this set
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the post to add
     * @returns {Promise<PostSet>}
     */
    async addPost(id) {
        this.main.request.authCheck("PostSet#addPost");
        return this.main.postSets.addPost.call(this.main.posts, this.id, id);
    }
    /**
     * Remove a post from this set
     *
     * * Requires Authentication
     *
     * @param {number} id - the id of the post to remove
     * @returns {Promise<PostSet>}
     */
    async removePost(id) {
        this.main.request.authCheck("PostSet#removePost");
        return this.main.postSets.removePost.call(this.main.postSets, this.id, id);
    }
    /**
     * modify this set
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {string} [options.name] - the name of the set
     * @param {string} [options.shortname] - the short name of the set
     * @param {string} [options.escription] - the description of the set
     * @param {boolean} [options.active] - if the set is public
     * @param {boolean} [options.transfer_on_deletion] - if deleted posts should be replaced with parents
     * @returns {Promise<PostSet>}
     */
    async modify(options) {
        this.main.request.authCheck("PostSet#modify");
        if (!options)
            throw new Error("options is required in PostSet#modify");
        return this.main.postSets.modify.call(this.main.postSets, this.id, options);
    }
    /**
     * Delete this set
     *
     * * Requires Authentication
     *
     * @returns {Promise<null>}
     */
    async delete() {
        this.main.request.authCheck("PostSet#delete");
        return this.main.postSets.delete.call(this.main.postSets, this.id);
    }
}
exports.default = PostSet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9zdFNldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3R1cmVzL1Bvc3RTZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQSxNQUFxQixPQUFPO0lBQ25CLElBQUksQ0FBTztJQUNuQixFQUFFLENBQVM7SUFDWCxJQUFJLENBQVM7SUFDYixTQUFTLENBQVM7SUFDbEIsV0FBVyxDQUFTO0lBQ3BCLFNBQVMsQ0FBVTtJQUNuQixrQkFBa0IsQ0FBVTtJQUM1QixVQUFVLENBQVM7SUFDbkIsUUFBUSxDQUFnQjtJQUN4QixVQUFVLENBQVM7SUFDbkIsVUFBVSxDQUFTO0lBQ25CLFVBQVUsQ0FBUztJQUNuQixZQUFZLElBQVUsRUFBRSxJQUF1QjtRQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7WUFDbkMsS0FBSyxFQUFTLElBQUk7WUFDbEIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsVUFBVSxFQUFJLEtBQUs7WUFDbkIsUUFBUSxFQUFNLEtBQUs7U0FDbkIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsUUFBUSxLQUFLLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRIOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsVUFBVSxLQUFLLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXpGOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQVU7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDL0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQVU7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDbEQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7T0FZRztJQUNILEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBNkI7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLE9BQU87WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7UUFDdkUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyxNQUFNO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDOUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0NBQ0Q7QUE3RkQsMEJBNkZDIn0=