"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Tag {
    main;
    id;
    name;
    created_at;
    updated_at;
    creator_id;
    post_count;
    category;
    related_tags;
    related_tags_updated_at;
    is_locked;
    constructor(main, info) {
        Object.assign(this, info);
        Object.defineProperty(this, "main", {
            value: main,
            configurable: false,
            enumerable: false,
            writable: false
        });
    }
    /**
     * Get posts with this tag (and others, if specified)
     *
     * @param {object} [options]
     * @param {(Array<string> | string)} [options.tags] - narrow the search by specific tags
     * @param {(number |`${"" | "a" | "b"}${number}`)} [options.page] - number for exact page, a${number} posts after ${number}, b${number} posts before ${number}
     * @param {number} [options.limit] - limit the maximum amount of results returned
     *
     * @returns {Promise<Array<Post>>}
     */
    async getPosts(options) { return this.main.posts.search.call(this.main.posts, { ...(options ?? {}), tags: [this.name, ...(options?.tags ?? [])] }); }
    /**
     * Fetch all posts with this tag (and extras, if specified)
     *
     * @param {Array<string>} [extraTags] - the additional tags for searching
     * @param {number} [lastID] - internal use only
     * @param {Array<Post>} [lastPosts] - internal use only
     * @returns
     */
    async getAllPosts(extraTags, lastID, lastPosts = []) {
        const posts = await this.main.posts.search({
            tags: [this.name, ...(extraTags ?? [])],
            page: lastID === undefined ? undefined : `b${lastID}`,
            limit: this.main.POST_LIMIT_PER_REQUEST
        });
        lastPosts.push(...posts);
        if (posts.length === this.main.POST_LIMIT_PER_REQUEST)
            return this.getAllPosts(extraTags, lastID, lastPosts);
        else
            return lastPosts;
    }
    /**
     * modify this tag
     *
     * * Requires Authentication
     *
     * @param {object} options
     * @param {number} [options.category] - the category of the tag
     * @param {string} [options.locked] - if the tag is locked (requires moderator)
     * @returns {Promise<Tag>}
     */
    async modify(options) {
        this.main.request.authCheck("Pool#modify");
        if (!options)
            throw new Error("options is required in Tags#modify");
        return this.main.tags.modify.call(this.main.tags, this.id, options);
    }
    /**
     * Search this tag's history
     *
     * @param {object} [options]
     * @param {number} [options.user] - page of results to get
     * @param {number} [options.user_id] - page of results to get
     * @param {number} [options.page] - page of results to get
     * @param {number} [options.limit] - limit the maximum amount of results returned
     * @param
     * @returns {Promise<Array<TagHistory>>}
     */
    async getHistory(options) {
        return this.main.tags.searchHistory.call(this.main.tags, { id: this.id, ...options });
    }
}
exports.default = Tag;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cnVjdHVyZXMvVGFnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EsTUFBcUIsR0FBRztJQUNmLElBQUksQ0FBTztJQUNuQixFQUFFLENBQVM7SUFDWCxJQUFJLENBQVM7SUFDYixVQUFVLENBQVM7SUFDbkIsVUFBVSxDQUFTO0lBQ25CLFVBQVUsQ0FBUztJQUNuQixVQUFVLENBQVM7SUFDbkIsUUFBUSxDQUFTO0lBQ2pCLFlBQVksQ0FBZ0I7SUFDNUIsdUJBQXVCLENBQWdCO0lBQ3ZDLFNBQVMsQ0FBVTtJQUNuQixZQUFZLElBQVUsRUFBRSxJQUFtQjtRQUMxQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7WUFDbkMsS0FBSyxFQUFTLElBQUk7WUFDbEIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsVUFBVSxFQUFJLEtBQUs7WUFDbkIsUUFBUSxFQUFNLEtBQUs7U0FDbkIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNILEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBNEIsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFLOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQXlCLEVBQUUsTUFBZSxFQUFFLFlBQXlCLEVBQUU7UUFDeEYsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFDMUMsSUFBSSxFQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3hDLElBQUksRUFBRyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxFQUFFO1lBQ3RELEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQjtTQUN2QyxDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDekIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCO1lBQUUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7O1lBQ3hHLE9BQU8sU0FBUyxDQUFDO0lBQ3ZCLENBQUM7SUFDRDs7Ozs7Ozs7O09BU0c7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQXlCO1FBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsT0FBTztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUNwRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBcUQ7UUFDckUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7Q0FDRDtBQWxGRCxzQkFrRkMifQ==