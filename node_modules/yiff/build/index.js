"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const defaults_1 = __importDefault(require("./src/defaults"));
const request_1 = __importDefault(require("./src/request"));
class Yiff {
    constructor(config) {
        this.config = config;
        this.useragent = this.config?.useragent ? `${defaults_1.default.useragent} ${this.config.useragent}` : defaults_1.default.useragent;
        // console.log(config)
        this.killswitch = {
            enabled: config?.killswitch?.enabled ?? true,
            instance: config?.killswitch?.instance || defaults_1.default.killswitch
        };
    }
    /**
     * Request random posts from e621
     * @param tags The Tags your want to use for your Search
     * @param limit the amount of posts you want back
     * @returns A Unfiltered e621 Response
     */
    async e621(tags, limit) {
        try {
            let res = await request_1.default({
                site: "e621",
                limit, tags,
                useragent: this.useragent,
                killswitch: this.killswitch,
                apikey: this.config?.apikey?.e621
            });
            return res;
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * Request random posts from gelbooru
     * @param tags The Tags your want to use for your Search
     * @param limit the amount of posts you want back
     * @returns A Unfiltered e621 Response
     */
    async gelbooru(tags, limit) {
        try {
            let res = await request_1.default({
                site: "gelbooru",
                limit, tags,
                useragent: this.useragent,
                killswitch: this.killswitch,
            });
            return res;
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * Request random posts from e926
     * @param tags The Tags your want to use for your Search
     * @param limit the amount of posts you want back
     * @returns A Unfiltered e926 Response
     */
    async e926(tags, limit) {
        try {
            let res = await request_1.default({
                site: "e926",
                limit, tags,
                useragent: this.useragent,
                killswitch: this.killswitch,
                apikey: this.config?.apikey?.e926
            });
            return res;
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * Request an Image from yiff.rest
     * @param category the category you want an image from
     * @param endpoint a valid endpoint of the category you want an image from
     * @returns Unfiltered yiff.rest Response
     */
    async yiffy(category, endpoint) {
        try {
            let res = await request_1.default({
                site: "yiffrest",
                category, endpoint,
                useragent: this.useragent,
                killswitch: this.killswitch,
                apikey: this.config?.apikey?.yiffrest
            });
            return res;
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * Request an Image from the Sheri.Bot API *(most endpoints require a API Key)*
     * @param endpoint a valid endpoint you want an image from
     * @returns Unfiltered sheri.bot Response
     */
    async sheri(endpoint) {
        try {
            let res = await request_1.default({
                site: "sheri",
                endpoint,
                useragent: this.useragent,
                killswitch: this.killswitch,
                apikey: this.config?.apikey?.sheri
            });
            return res;
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * Request a random Image from api.floofy.dev (ALL NSFW)
     * @returns Unfiltered api.floofy.dev Response
     */
    async floofy() {
        try {
            let res = await request_1.default({
                site: "floofy",
                useragent: this.useragent,
                killswitch: this.killswitch,
            });
            return res;
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * Request a random Image from shibe.online
     * @param animal the animal you want an image of
     * @param limit the amount of images you want back
     * @returns Unfiltered shibe.online Response
     */
    async shibe(animal, limit) {
        try {
            let res = await request_1.default({
                site: "shibe",
                animal, limit,
                useragent: this.useragent,
                killswitch: this.killswitch,
            });
            return res;
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * Get a random fox from randomfox.ca
     * @returns Unfiltered randomfox.ca Response
     */
    async fox() {
        try {
            let res = await request_1.default({
                site: "fox",
                useragent: this.useragent,
                killswitch: this.killswitch,
            });
            return res;
        }
        catch (error) {
            console.error(error);
        }
    }
    /**
     * Request an Image from Thaldr.in's API *(Endpoints require an API Key)*
     * @param endpoint a valid endpoint you want an image from
     * @returns Unfiltered thaldr.in/api Response
     */
    async thaldrin(endpoint) {
        try {
            let res = await request_1.default({
                site: "thaldrin",
                endpoint,
                useragent: this.useragent,
                killswitch: this.killswitch,
                apikey: this.config?.apikey?.thaldrin
            });
            return res;
        }
        catch (error) {
            console.error(error);
        }
    }
}
Yiff.default = Yiff;
module.exports = Yiff;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsOERBQXNDO0FBR3RDLDREQUFvQztBQUVwQyxNQUFNLElBQUk7SUFLTixZQUFZLE1BQWU7UUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxrQkFBUSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxrQkFBUSxDQUFDLFNBQVMsQ0FBQTtRQUMvRyxzQkFBc0I7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRztZQUNkLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sSUFBSSxJQUFJO1lBQzVDLFFBQVEsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsSUFBSSxrQkFBUSxDQUFDLFVBQVU7U0FFaEUsQ0FBQTtJQUNMLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBdUIsRUFBRSxLQUFjO1FBQzlDLElBQUk7WUFDQSxJQUFJLEdBQUcsR0FBRyxNQUFNLGlCQUFPLENBQUM7Z0JBQ3BCLElBQUksRUFBRSxNQUFNO2dCQUNaLEtBQUssRUFBRSxJQUFJO2dCQUNYLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztnQkFDekIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO2dCQUMzQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSTthQUNwQyxDQUFDLENBQUE7WUFDRixPQUFPLEdBQUcsQ0FBQTtTQUNiO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQ3ZCO0lBQ0wsQ0FBQztJ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