import { config } from "./src/types";
declare class Yiff {
    private config;
    private useragent;
    private killswitch;
    constructor(config?: config);
    /**
     * Request random posts from e621
     * @param tags The Tags your want to use for your Search
     * @param limit the amount of posts you want back
     * @returns A Unfiltered e621 Response
     */
    e621(tags: string | string[], limit?: number): Promise<any>;
    /**
     * Request random posts from gelbooru
     * @param tags The Tags your want to use for your Search
     * @param limit the amount of posts you want back
     * @returns A Unfiltered e621 Response
     */
    gelbooru(tags: string | string[], limit?: number): Promise<any>;
    /**
     * Request random posts from e926
     * @param tags The Tags your want to use for your Search
     * @param limit the amount of posts you want back
     * @returns A Unfiltered e926 Response
     */
    e926(tags: string | string[], limit?: number): Promise<any>;
    /**
     * Request an Image from yiff.rest
     * @param category the category you want an image from
     * @param endpoint a valid endpoint of the category you want an image from
     * @returns Unfiltered yiff.rest Response
     */
    yiffy(category: string, endpoint: string): Promise<any>;
    /**
     * Request an Image from the Sheri.Bot API *(most endpoints require a API Key)*
     * @param endpoint a valid endpoint you want an image from
     * @returns Unfiltered sheri.bot Response
     */
    sheri(endpoint: string): Promise<any>;
    /**
     * Request a random Image from api.floofy.dev (ALL NSFW)
     * @returns Unfiltered api.floofy.dev Response
     */
    floofy(): Promise<any>;
    /**
     * Request a random Image from shibe.online
     * @param animal the animal you want an image of
     * @param limit the amount of images you want back
     * @returns Unfiltered shibe.online Response
     */
    shibe(animal: string, limit: number): Promise<any>;
    /**
     * Get a random fox from randomfox.ca
     * @returns Unfiltered randomfox.ca Response
     */
    fox(): Promise<any>;
    /**
     * Request an Image from Thaldr.in's API *(Endpoints require an API Key)*
     * @param endpoint a valid endpoint you want an image from
     * @returns Unfiltered thaldr.in/api Response
     */
    thaldrin(endpoint: string): Promise<any>;
}
export = Yiff;
