"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const consts_1 = __importDefault(require("./consts"));
async function request(options) {
    switch (options.site) {
        case 'e621':
            if (!options.tags)
                throw Error("No Tags provided");
            let e6request = await axios_1.default({
                method: 'get',
                url: options.killswitch?.enabled ? `${options.killswitch.instance}${consts_1.default.killswitch.e621}?limit=${options.limit || 1}&tags=${options.tags}&useragent=${options.useragent}` :
                    `${consts_1.default.direct.e621}?tags=limit:${options.limit || 1} order:random -young ${options.tags.toString()}`,
                headers: {
                    "User-Agent": options.useragent,
                    // @ts-ignore
                    ...(options?.apikey?.e621 ? {
                        // @ts-ignore
                        "Authorization": options?.apikey?.e621
                    } : {})
                }
            });
            return e6request.data;
        case 'e926':
            if (!options.tags)
                throw Error("No Tags provided");
            let e9request = await axios_1.default({
                method: 'get',
                url: options.killswitch?.enabled ? `${options.killswitch.instance}${consts_1.default.killswitch.e926}?limit=${options.limit || 1}&tags=${options.tags}&useragent=${options.useragent}` :
                    `${consts_1.default.direct.e926}?tags=limit:${options.limit || 1} order:random -young ${options.tags.toString()}`,
                headers: {
                    "User-Agent": options.useragent,
                    // @ts-ignore
                    ...(options?.apikey?.e926 ? {
                        // @ts-ignore
                        "Authorization": options?.apikey?.e926
                    } : {})
                }
            });
            return e9request.data;
        case 'gelbooru':
            if (!options.tags)
                throw Error("No Tags provided");
            let gelboorureq = await axios_1.default({
                method: 'get',
                url: options.killswitch?.enabled ? `${options.killswitch.instance}${consts_1.default.killswitch.gelbooru}?limit=${options.limit || 1}&tags=${options.tags}&useragent=${options.useragent}` :
                    `${consts_1.default.direct.gelbooru}/index.php?page=dapi&s=post&json=1&q=index&limit=${Number(options.limit) || 1}&tags=sort:random+${options.tags.toString().split(' ').join("+")}`,
                headers: {
                    "User-Agent": options.useragent,
                    // @ts-ignore
                    // ...(options?.apikey?.e926 ? {
                    //     // @ts-ignore
                    //     "Authorization": options?.apikey?.e926
                    // } : {})
                }
            });
            return gelboorureq.data;
        case 'furrybot':
        case 'yiffrest':
            let customMethod;
            if (options.killswitch?.enabled) {
                customMethod = "POST";
            }
            else {
                customMethod = "GET";
            }
            let yiffreq = await axios_1.default({
                method: customMethod,
                url: options.killswitch?.enabled ? `${options.killswitch.instance}${consts_1.default.killswitch.yiffrest}` : `${consts_1.default.direct.yiffrest}/${options.category}/${options.endpoint}`,
                data: {
                    category: options.category,
                    endpoint: options.endpoint,
                    apikey: options.apikey,
                    useragent: options.useragent
                },
                headers: {
                    "User-Agent": options.useragent,
                    // @ts-ignore
                    ...(options.apikey?.yiffrest ? {
                        // @ts-ignore
                        "Authorization": options?.apikey?.yiffrest
                    } : {})
                }
            });
            return yiffreq.data;
        case 'sheri':
            if (options.apikey) {
                // @ts-ignore
                if (!options.apikey.startsWith('Token')) {
                    // @ts-ignore
                    options.apikey = `Token ${options.apikey}`;
                }
            }
            let sherireq = await axios_1.default({
                method: 'get',
                url: options.killswitch?.enabled ? `${options.killswitch.instance}${consts_1.default.killswitch.sheri}?endpoint=${options.endpoint}${options.apikey ? `&apikey=${options.apikey}` : ""}` : `${consts_1.default.direct.sheri}/${options.endpoint}?format=json`,
                headers: {
                    "User-Agent": options.useragent,
                    // @ts-ignore
                    ...(options.apikey ? {
                        // @ts-ignore
                        "Authorization": options.apikey
                    } : {})
                }
            });
            return sherireq.data;
        case 'floofy':
            let floofyreq = await axios_1.default({
                method: 'get',
                url: options.killswitch?.enabled ? `${options.killswitch.instance}${consts_1.default.killswitch.floofy}` : `${consts_1.default.direct.floofy}/yiff`,
                headers: {
                    "User-Agent": options.useragent,
                }
            });
            return floofyreq.data;
        case 'shibe':
            let shibereq = await axios_1.default({
                method: 'get',
                url: options.killswitch?.enabled ? `${options.killswitch.instance}${consts_1.default.killswitch.shibe}?animal=${options.animal}&limit=${options.limit}` :
                    `${consts_1.default.direct.shibe}/${options.animal}?count=${options.limit}&urls=true&httpsUrls=true`,
                headers: {
                    "User-Agent": options.useragent,
                }
            });
            return shibereq.data;
        case 'fox':
            let randomfoxreq = await axios_1.default({
                method: 'get',
                url: options.killswitch?.enabled ? `${options.killswitch.instance}${consts_1.default.killswitch.fox}` : consts_1.default.direct.fox,
                headers: {
                    "User-Agent": options.useragent,
                }
            });
            return randomfoxreq.data;
        case 'thaldrin':
            let thaldrinreq = await axios_1.default({
                method: 'get',
                url: options.killswitch?.enabled ? `${options.killswitch.instance}${consts_1.default.killswitch.thaldrin}?endpoint=${options.endpoint}${options.apikey ? `&apikey=${options.apikey}` : ""}` : `${consts_1.default.direct.thaldrin}/categories/${options.endpoint}`,
                headers: {
                    "User-Agent": options.useragent,
                    // @ts-ignore
                    ...(options.apikey ? {
                        // @ts-ignore
                        "Authorization": options.apikey
                    } : {})
                }
            });
            return thaldrinreq.data;
        default:
            return {
                success: false,
                message: "No URL provided"
            };
    }
}
exports.default = request;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0RBQXlCO0FBQ3pCLHNEQUF5QjtBQUNWLEtBQUssVUFBVSxPQUFPLENBQUMsT0FtQmpDO0lBR0QsUUFBUSxPQUFPLENBQUMsSUFBSSxFQUFFO1FBQ2xCLEtBQUssTUFBTTtZQUNQLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSTtnQkFBRSxNQUFNLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1lBQ2xELElBQUksU0FBUyxHQUFHLE1BQU0sZUFBSyxDQUFDO2dCQUN4QixNQUFNLEVBQUUsS0FBSztnQkFDYixHQUFHLEVBQUUsT0FBTyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsZ0JBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxVQUFVLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxTQUFTLE9BQU8sQ0FBQyxJQUFJLGNBQWMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7b0JBQ3JLLEdBQUcsZ0JBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxlQUFlLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyx3QkFBd0IsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDdEcsT0FBTyxFQUFFO29CQUNMLFlBQVksRUFBRSxPQUFPLENBQUMsU0FBUztvQkFDL0IsYUFBYTtvQkFDYixHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUN4QixhQUFhO3dCQUNiLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUk7cUJBQ3pDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztpQkFDVjthQUNKLENBQUMsQ0FBQTtZQUVGLE9BQU8sU0FBUyxDQUFDLElBQUks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